
MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000390a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  0000390a  0000399e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800174  00800174  00003ab2  2**0
                  ALLOC
  3 .stab         0000366c  00000000  00000000  00003ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018c1  00000000  00000000  00007120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000089e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a8da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c574  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c961  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d12f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <main>
      8a:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e5       	ldi	r26, 0x5B	; 91
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e5       	ldi	r24, 0x5B	; 91
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 17 1c 	jmp	0x382e	; 0x382e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_Config_t * config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 -> 1-Stop Bit || 1 -> 2-Stop Bits
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (config->bit_data << 1) | (config->parity << 4) | (config->stop_bit << 3);
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	80 81       	ld	r24, Z
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	28 2f       	mov	r18, r24
     b7e:	20 68       	ori	r18, 0x80	; 128
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	81 81       	ldd	r24, Z+1	; 0x01
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	82 95       	swap	r24
     b8c:	92 95       	swap	r25
     b8e:	90 7f       	andi	r25, 0xF0	; 240
     b90:	98 27       	eor	r25, r24
     b92:	80 7f       	andi	r24, 0xF0	; 240
     b94:	98 27       	eor	r25, r24
     b96:	28 2b       	or	r18, r24
     b98:	eb 81       	ldd	r30, Y+3	; 0x03
     b9a:	fc 81       	ldd	r31, Y+4	; 0x04
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	82 2b       	or	r24, r18
     bb0:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->baud_rate * 8UL))) - 1);
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	83 81       	ldd	r24, Z+3	; 0x03
     bb8:	94 81       	ldd	r25, Z+4	; 0x04
     bba:	cc 01       	movw	r24, r24
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	aa 1f       	adc	r26, r26
     bc6:	bb 1f       	adc	r27, r27
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	aa 1f       	adc	r26, r26
     bce:	bb 1f       	adc	r27, r27
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	aa 1f       	adc	r26, r26
     bd6:	bb 1f       	adc	r27, r27
     bd8:	9c 01       	movw	r18, r24
     bda:	ad 01       	movw	r20, r26
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	92 e1       	ldi	r25, 0x12	; 18
     be0:	aa e7       	ldi	r26, 0x7A	; 122
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	bc 01       	movw	r22, r24
     be6:	cd 01       	movw	r24, r26
     be8:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__udivmodsi4>
     bec:	da 01       	movw	r26, r20
     bee:	c9 01       	movw	r24, r18
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	9a 83       	std	Y+2, r25	; 0x02
     bf4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     bf6:	e0 e4       	ldi	r30, 0x40	; 64
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	89 2f       	mov	r24, r25
     c00:	99 27       	eor	r25, r25
     c02:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c04:	e9 e2       	ldi	r30, 0x29	; 41
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	80 83       	st	Z, r24
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	0f 92       	push	r0
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c26:	eb e2       	ldi	r30, 0x2B	; 43
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	80 72       	andi	r24, 0x20	; 32
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	00 97       	sbiw	r24, 0x00	; 0
     c36:	b9 f3       	breq	.-18     	; 0xc26 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c38:	ec e2       	ldi	r30, 0x2C	; 44
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c50:	eb e2       	ldi	r30, 0x2B	; 43
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	dc f7       	brge	.-10     	; 0xc50 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c5a:	ec e2       	ldi	r30, 0x2C	; 44
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
}
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <UART_sendString+0x6>
     c6c:	0f 92       	push	r0
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	9b 83       	std	Y+3, r25	; 0x03
     c74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c76:	19 82       	std	Y+1, r1	; 0x01
     c78:	0e c0       	rjmp	.+28     	; 0xc96 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	9b 81       	ldd	r25, Y+3	; 0x03
     c84:	fc 01       	movw	r30, r24
     c86:	e2 0f       	add	r30, r18
     c88:	f3 1f       	adc	r31, r19
     c8a:	80 81       	ld	r24, Z
     c8c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <UART_sendByte>
		i++;
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ca0:	fc 01       	movw	r30, r24
     ca2:	e2 0f       	add	r30, r18
     ca4:	f3 1f       	adc	r31, r19
     ca6:	80 81       	ld	r24, Z
     ca8:	88 23       	and	r24, r24
     caa:	39 f7       	brne	.-50     	; 0xc7a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

	UART_sendByte('#');
     cac:	83 e2       	ldi	r24, 0x23	; 35
     cae:	0e 94 0d 06 	call	0xc1a	; 0xc1a <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <UART_receiveString+0xa>
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	9b 83       	std	Y+3, r25	; 0x03
     cd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cd2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	9b 81       	ldd	r25, Y+3	; 0x03
     cde:	8c 01       	movw	r16, r24
     ce0:	02 0f       	add	r16, r18
     ce2:	13 1f       	adc	r17, r19
     ce4:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_recieveByte>
     ce8:	f8 01       	movw	r30, r16
     cea:	80 83       	st	Z, r24
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
     cf2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	8c 01       	movw	r16, r24
     d00:	02 0f       	add	r16, r18
     d02:	13 1f       	adc	r17, r19
     d04:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_recieveByte>
     d08:	f8 01       	movw	r30, r16
     d0a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	9b 81       	ldd	r25, Y+3	; 0x03
     d16:	fc 01       	movw	r30, r24
     d18:	e2 0f       	add	r30, r18
     d1a:	f3 1f       	adc	r31, r19
     d1c:	80 81       	ld	r24, Z
     d1e:	83 32       	cpi	r24, 0x23	; 35
     d20:	31 f7       	brne	.-52     	; 0xcee <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	fc 01       	movw	r30, r24
     d2e:	e2 0f       	add	r30, r18
     d30:	f3 1f       	adc	r31, r19
     d32:	10 82       	st	Z, r1
}
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	1f 91       	pop	r17
     d40:	0f 91       	pop	r16
     d42:	08 95       	ret

00000d44 <__vector_7>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_COMPA_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_ptr)
     d6e:	80 91 74 01 	lds	r24, 0x0174
     d72:	90 91 75 01 	lds	r25, 0x0175
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	29 f0       	breq	.+10     	; 0xd84 <__vector_7+0x40>
	{
		(*CallBack_ptr)();
     d7a:	e0 91 74 01 	lds	r30, 0x0174
     d7e:	f0 91 75 01 	lds	r31, 0x0175
     d82:	09 95       	icall
	}
}
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     daa:	1f 92       	push	r1
     dac:	0f 92       	push	r0
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	0f 92       	push	r0
     db2:	11 24       	eor	r1, r1
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	if(CallBack_ptr)
     dd4:	80 91 74 01 	lds	r24, 0x0174
     dd8:	90 91 75 01 	lds	r25, 0x0175
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	29 f0       	breq	.+10     	; 0xdea <__vector_9+0x40>
	{
		(*CallBack_ptr)();
     de0:	e0 91 74 01 	lds	r30, 0x0174
     de4:	f0 91 75 01 	lds	r31, 0x0175
     de8:	09 95       	icall
	}
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	ff 91       	pop	r31
     df0:	ef 91       	pop	r30
     df2:	bf 91       	pop	r27
     df4:	af 91       	pop	r26
     df6:	9f 91       	pop	r25
     df8:	8f 91       	pop	r24
     dfa:	7f 91       	pop	r23
     dfc:	6f 91       	pop	r22
     dfe:	5f 91       	pop	r21
     e00:	4f 91       	pop	r20
     e02:	3f 91       	pop	r19
     e04:	2f 91       	pop	r18
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <Timer1_init>:
/*
 * Description :
 * Initializes the Timer driver
 */
void Timer1_init(const Timer1_Config_t * Config_Ptr)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <Timer1_init+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <Timer1_init+0x8>
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	9a 83       	std	Y+2, r25	; 0x02
     e1e:	89 83       	std	Y+1, r24	; 0x01
	/* 1. Check required timer mode*/
	switch (Config_Ptr->mode)
     e20:	e9 81       	ldd	r30, Y+1	; 0x01
     e22:	fa 81       	ldd	r31, Y+2	; 0x02
     e24:	85 81       	ldd	r24, Z+5	; 0x05
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	3c 83       	std	Y+4, r19	; 0x04
     e2c:	2b 83       	std	Y+3, r18	; 0x03
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	31 f0       	breq	.+12     	; 0xe42 <Timer1_init+0x32>
     e36:	2b 81       	ldd	r18, Y+3	; 0x03
     e38:	3c 81       	ldd	r19, Y+4	; 0x04
     e3a:	21 30       	cpi	r18, 0x01	; 1
     e3c:	31 05       	cpc	r19, r1
     e3e:	a9 f0       	breq	.+42     	; 0xe6a <Timer1_init+0x5a>
     e40:	2e c0       	rjmp	.+92     	; 0xe9e <Timer1_init+0x8e>
	case TIMER1_NORMAL_MODE:
		/* if normal mode,
		 * 					load required initial value in TCNT1 register,
		 * 					Adjust WGM bits to normal mode
		 * 					enable overflow interrupt */
		TCNT1 = Config_Ptr->initial_value;
     e42:	ac e4       	ldi	r26, 0x4C	; 76
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e9 81       	ldd	r30, Y+1	; 0x01
     e48:	fa 81       	ldd	r31, Y+2	; 0x02
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24

		TCCR1A = 0; /* noraml mode,  OC1A disconnected */
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1

		SET_BIT(TIMSK, TOIE1); /* enable overflow interrupt */
     e5a:	a9 e5       	ldi	r26, 0x59	; 89
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e9 e5       	ldi	r30, 0x59	; 89
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	8c 93       	st	X, r24
     e68:	1a c0       	rjmp	.+52     	; 0xe9e <Timer1_init+0x8e>
	case TIMER1_CTC_MODE:
		/* if CTC mode,
		 * 				load required compare value in OCR1 register,
		 * 				Adjust WGM bits to CTC mode
		 * 				enable o/p compare match interrupt */
		OCR1A = Config_Ptr->compare_value;
     e6a:	aa e4       	ldi	r26, 0x4A	; 74
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e9 81       	ldd	r30, Y+1	; 0x01
     e70:	fa 81       	ldd	r31, Y+2	; 0x02
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	11 96       	adiw	r26, 0x01	; 1
     e78:	9c 93       	st	X, r25
     e7a:	8e 93       	st	-X, r24

		TCCR1A = 0; /* CTC mode,  OC1A disconnected */
     e7c:	ef e4       	ldi	r30, 0x4F	; 79
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	10 82       	st	Z, r1

		SET_BIT(TCCR1B, WGM12);	/* CTC mode: WGM12 bit = 1 */
     e82:	ae e4       	ldi	r26, 0x4E	; 78
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	ee e4       	ldi	r30, 0x4E	; 78
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	8c 93       	st	X, r24

		SET_BIT(TIMSK, OCIE1A); /* enable o/p compare match flag */
     e90:	a9 e5       	ldi	r26, 0x59	; 89
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e9 e5       	ldi	r30, 0x59	; 89
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 61       	ori	r24, 0x10	; 16
     e9c:	8c 93       	st	X, r24
		break;
	}

	/* reset prescaler bits then assign the required prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
     e9e:	ae e4       	ldi	r26, 0x4E	; 78
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ee e4       	ldi	r30, 0x4E	; 78
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	98 2f       	mov	r25, r24
     eaa:	98 7f       	andi	r25, 0xF8	; 248
     eac:	e9 81       	ldd	r30, Y+1	; 0x01
     eae:	fa 81       	ldd	r31, Y+2	; 0x02
     eb0:	84 81       	ldd	r24, Z+4	; 0x04
     eb2:	89 2b       	or	r24, r25
     eb4:	8c 93       	st	X, r24
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <Timer1_deInit>:
/*
 * Description :
 * Disable the Timer driver
 */
void Timer1_deInit(void)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
     ecc:	ef e4       	ldi	r30, 0x4F	; 79
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	10 82       	st	Z, r1
	TCCR1B = 0;
     ed2:	ee e4       	ldi	r30, 0x4E	; 78
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	10 82       	st	Z, r1
	TCNT1 = 0;
     ed8:	ec e4       	ldi	r30, 0x4C	; 76
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	11 82       	std	Z+1, r1	; 0x01
     ede:	10 82       	st	Z, r1

	/* Clear timer1 used interrupt bits */
	CLEAR_BIT(TIMSK, TOIE1);
     ee0:	a9 e5       	ldi	r26, 0x59	; 89
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e9 e5       	ldi	r30, 0x59	; 89
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8b 7f       	andi	r24, 0xFB	; 251
     eec:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);
     eee:	a9 e5       	ldi	r26, 0x59	; 89
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e9 e5       	ldi	r30, 0x59	; 89
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	8c 93       	st	X, r24
}
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <Timer1_setCallBack>:
/*
 * Description :
 * sets the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	00 d0       	rcall	.+0      	; 0xf08 <Timer1_setCallBack+0x6>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	9a 83       	std	Y+2, r25	; 0x02
     f0e:	89 83       	std	Y+1, r24	; 0x01
	if(a_ptr)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	31 f0       	breq	.+12     	; 0xf24 <Timer1_setCallBack+0x22>
	{
		CallBack_ptr = a_ptr;
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	90 93 75 01 	sts	0x0175, r25
     f20:	80 93 74 01 	sts	0x0174, r24
	}
	else
	{
		//a_ptr is null (error)
	}
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <GPIO_setupPinDirection+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <GPIO_setupPinDirection+0x8>
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	6a 83       	std	Y+2, r22	; 0x02
     f40:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	08 f0       	brcs	.+2      	; 0xf4a <GPIO_setupPinDirection+0x1c>
     f48:	d5 c0       	rjmp	.+426    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	84 30       	cpi	r24, 0x04	; 4
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <GPIO_setupPinDirection+0x24>
     f50:	d1 c0       	rjmp	.+418    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3d 83       	std	Y+5, r19	; 0x05
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <GPIO_setupPinDirection+0x3a>
     f66:	43 c0       	rjmp	.+134    	; 0xfee <GPIO_setupPinDirection+0xc0>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	2c f4       	brge	.+10     	; 0xf7c <GPIO_setupPinDirection+0x4e>
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	71 f0       	breq	.+28     	; 0xf96 <GPIO_setupPinDirection+0x68>
     f7a:	bc c0       	rjmp	.+376    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <GPIO_setupPinDirection+0x5a>
     f86:	5f c0       	rjmp	.+190    	; 0x1046 <GPIO_setupPinDirection+0x118>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <GPIO_setupPinDirection+0x66>
     f92:	85 c0       	rjmp	.+266    	; 0x109e <GPIO_setupPinDirection+0x170>
     f94:	af c0       	rjmp	.+350    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	a1 f4       	brne	.+40     	; 0xfc4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f9c:	aa e3       	ldi	r26, 0x3A	; 58
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ea e3       	ldi	r30, 0x3A	; 58
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <GPIO_setupPinDirection+0x8c>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <GPIO_setupPinDirection+0x88>
     fbe:	84 2b       	or	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	98 c0       	rjmp	.+304    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fc4:	aa e3       	ldi	r26, 0x3A	; 58
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ea e3       	ldi	r30, 0x3A	; 58
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_setupPinDirection+0xb4>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_setupPinDirection+0xb0>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	83 c0       	rjmp	.+262    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	a1 f4       	brne	.+40     	; 0x101c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ff4:	a7 e3       	ldi	r26, 0x37	; 55
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e7 e3       	ldi	r30, 0x37	; 55
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_setupPinDirection+0xe4>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_setupPinDirection+0xe0>
    1016:	84 2b       	or	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	6c c0       	rjmp	.+216    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    101c:	a7 e3       	ldi	r26, 0x37	; 55
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e7 e3       	ldi	r30, 0x37	; 55
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_setupPinDirection+0x10c>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_setupPinDirection+0x108>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	57 c0       	rjmp	.+174    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	a1 f4       	brne	.+40     	; 0x1074 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    104c:	a4 e3       	ldi	r26, 0x34	; 52
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e4 e3       	ldi	r30, 0x34	; 52
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <GPIO_setupPinDirection+0x13c>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <GPIO_setupPinDirection+0x138>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	40 c0       	rjmp	.+128    	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1074:	a4 e3       	ldi	r26, 0x34	; 52
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e4 e3       	ldi	r30, 0x34	; 52
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <GPIO_setupPinDirection+0x164>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <GPIO_setupPinDirection+0x160>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	2b c0       	rjmp	.+86     	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	a1 f4       	brne	.+40     	; 0x10cc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10a4:	a1 e3       	ldi	r26, 0x31	; 49
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e1 e3       	ldi	r30, 0x31	; 49
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <GPIO_setupPinDirection+0x194>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <GPIO_setupPinDirection+0x190>
    10c6:	84 2b       	or	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	14 c0       	rjmp	.+40     	; 0x10f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10cc:	a1 e3       	ldi	r26, 0x31	; 49
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e1 e3       	ldi	r30, 0x31	; 49
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <GPIO_setupPinDirection+0x1bc>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <GPIO_setupPinDirection+0x1b8>
    10ee:	80 95       	com	r24
    10f0:	84 23       	and	r24, r20
    10f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	00 d0       	rcall	.+0      	; 0x110a <GPIO_writePin+0x6>
    110a:	00 d0       	rcall	.+0      	; 0x110c <GPIO_writePin+0x8>
    110c:	0f 92       	push	r0
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	6a 83       	std	Y+2, r22	; 0x02
    1116:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	88 30       	cpi	r24, 0x08	; 8
    111c:	08 f0       	brcs	.+2      	; 0x1120 <GPIO_writePin+0x1c>
    111e:	d5 c0       	rjmp	.+426    	; 0x12ca <GPIO_writePin+0x1c6>
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	08 f0       	brcs	.+2      	; 0x1128 <GPIO_writePin+0x24>
    1126:	d1 c0       	rjmp	.+418    	; 0x12ca <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3d 83       	std	Y+5, r19	; 0x05
    1130:	2c 83       	std	Y+4, r18	; 0x04
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	9d 81       	ldd	r25, Y+5	; 0x05
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <GPIO_writePin+0x3a>
    113c:	43 c0       	rjmp	.+134    	; 0x11c4 <GPIO_writePin+0xc0>
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	2c f4       	brge	.+10     	; 0x1152 <GPIO_writePin+0x4e>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	71 f0       	breq	.+28     	; 0x116c <GPIO_writePin+0x68>
    1150:	bc c0       	rjmp	.+376    	; 0x12ca <GPIO_writePin+0x1c6>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	09 f4       	brne	.+2      	; 0x115e <GPIO_writePin+0x5a>
    115c:	5f c0       	rjmp	.+190    	; 0x121c <GPIO_writePin+0x118>
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	91 05       	cpc	r25, r1
    1166:	09 f4       	brne	.+2      	; 0x116a <GPIO_writePin+0x66>
    1168:	85 c0       	rjmp	.+266    	; 0x1274 <GPIO_writePin+0x170>
    116a:	af c0       	rjmp	.+350    	; 0x12ca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	a1 f4       	brne	.+40     	; 0x119a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1172:	ab e3       	ldi	r26, 0x3B	; 59
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	eb e3       	ldi	r30, 0x3B	; 59
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_writePin+0x8c>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_writePin+0x88>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	98 c0       	rjmp	.+304    	; 0x12ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    119a:	ab e3       	ldi	r26, 0x3B	; 59
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	eb e3       	ldi	r30, 0x3B	; 59
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_writePin+0xb4>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_writePin+0xb0>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	83 c0       	rjmp	.+262    	; 0x12ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	a1 f4       	brne	.+40     	; 0x11f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11ca:	a8 e3       	ldi	r26, 0x38	; 56
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e8 e3       	ldi	r30, 0x38	; 56
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <GPIO_writePin+0xe4>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <GPIO_writePin+0xe0>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	6c c0       	rjmp	.+216    	; 0x12ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11f2:	a8 e3       	ldi	r26, 0x38	; 56
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e8 e3       	ldi	r30, 0x38	; 56
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_writePin+0x10c>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_writePin+0x108>
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	57 c0       	rjmp	.+174    	; 0x12ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	a1 f4       	brne	.+40     	; 0x124a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1222:	a5 e3       	ldi	r26, 0x35	; 53
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <GPIO_writePin+0x13c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <GPIO_writePin+0x138>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	40 c0       	rjmp	.+128    	; 0x12ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    124a:	a5 e3       	ldi	r26, 0x35	; 53
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e3       	ldi	r30, 0x35	; 53
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GPIO_writePin+0x164>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GPIO_writePin+0x160>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	2b c0       	rjmp	.+86     	; 0x12ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	a1 f4       	brne	.+40     	; 0x12a2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    127a:	a2 e3       	ldi	r26, 0x32	; 50
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <GPIO_writePin+0x194>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <GPIO_writePin+0x190>
    129c:	84 2b       	or	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12a2:	a2 e3       	ldi	r26, 0x32	; 50
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e2 e3       	ldi	r30, 0x32	; 50
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <GPIO_writePin+0x1bc>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <GPIO_writePin+0x1b8>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_readPin+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <GPIO_readPin+0x8>
    12e2:	0f 92       	push	r0
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	8a 83       	std	Y+2, r24	; 0x02
    12ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12ec:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	88 30       	cpi	r24, 0x08	; 8
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <GPIO_readPin+0x1c>
    12f4:	84 c0       	rjmp	.+264    	; 0x13fe <GPIO_readPin+0x124>
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	84 30       	cpi	r24, 0x04	; 4
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <GPIO_readPin+0x24>
    12fc:	80 c0       	rjmp	.+256    	; 0x13fe <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3d 83       	std	Y+5, r19	; 0x05
    1306:	2c 83       	std	Y+4, r18	; 0x04
    1308:	4c 81       	ldd	r20, Y+4	; 0x04
    130a:	5d 81       	ldd	r21, Y+5	; 0x05
    130c:	41 30       	cpi	r20, 0x01	; 1
    130e:	51 05       	cpc	r21, r1
    1310:	79 f1       	breq	.+94     	; 0x1370 <GPIO_readPin+0x96>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	91 05       	cpc	r25, r1
    131a:	34 f4       	brge	.+12     	; 0x1328 <GPIO_readPin+0x4e>
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	21 15       	cp	r18, r1
    1322:	31 05       	cpc	r19, r1
    1324:	69 f0       	breq	.+26     	; 0x1340 <GPIO_readPin+0x66>
    1326:	6b c0       	rjmp	.+214    	; 0x13fe <GPIO_readPin+0x124>
    1328:	4c 81       	ldd	r20, Y+4	; 0x04
    132a:	5d 81       	ldd	r21, Y+5	; 0x05
    132c:	42 30       	cpi	r20, 0x02	; 2
    132e:	51 05       	cpc	r21, r1
    1330:	b9 f1       	breq	.+110    	; 0x13a0 <GPIO_readPin+0xc6>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	09 f4       	brne	.+2      	; 0x133e <GPIO_readPin+0x64>
    133c:	49 c0       	rjmp	.+146    	; 0x13d0 <GPIO_readPin+0xf6>
    133e:	5f c0       	rjmp	.+190    	; 0x13fe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1340:	e9 e3       	ldi	r30, 0x39	; 57
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_readPin+0x7e>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_readPin+0x7a>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	90 70       	andi	r25, 0x00	; 0
    1362:	88 23       	and	r24, r24
    1364:	19 f0       	breq	.+6      	; 0x136c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	49 c0       	rjmp	.+146    	; 0x13fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    136c:	19 82       	std	Y+1, r1	; 0x01
    136e:	47 c0       	rjmp	.+142    	; 0x13fe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1370:	e6 e3       	ldi	r30, 0x36	; 54
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_readPin+0xae>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_readPin+0xaa>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	90 70       	andi	r25, 0x00	; 0
    1392:	88 23       	and	r24, r24
    1394:	19 f0       	breq	.+6      	; 0x139c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	31 c0       	rjmp	.+98     	; 0x13fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	2f c0       	rjmp	.+94     	; 0x13fe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13a0:	e3 e3       	ldi	r30, 0x33	; 51
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <GPIO_readPin+0xde>
    13b4:	55 95       	asr	r21
    13b6:	47 95       	ror	r20
    13b8:	8a 95       	dec	r24
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <GPIO_readPin+0xda>
    13bc:	ca 01       	movw	r24, r20
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	90 70       	andi	r25, 0x00	; 0
    13c2:	88 23       	and	r24, r24
    13c4:	19 f0       	breq	.+6      	; 0x13cc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	19 c0       	rjmp	.+50     	; 0x13fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	17 c0       	rjmp	.+46     	; 0x13fe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13d0:	e0 e3       	ldi	r30, 0x30	; 48
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a9 01       	movw	r20, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_readPin+0x10e>
    13e4:	55 95       	asr	r21
    13e6:	47 95       	ror	r20
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_readPin+0x10a>
    13ec:	ca 01       	movw	r24, r20
    13ee:	81 70       	andi	r24, 0x01	; 1
    13f0:	90 70       	andi	r25, 0x00	; 0
    13f2:	88 23       	and	r24, r24
    13f4:	19 f0       	breq	.+6      	; 0x13fc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13fc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <GPIO_setupPortDirection+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <GPIO_setupPortDirection+0x8>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	84 30       	cpi	r24, 0x04	; 4
    1424:	90 f5       	brcc	.+100    	; 0x148a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	3c 83       	std	Y+4, r19	; 0x04
    142e:	2b 83       	std	Y+3, r18	; 0x03
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 05       	cpc	r25, r1
    1438:	d1 f0       	breq	.+52     	; 0x146e <GPIO_setupPortDirection+0x5e>
    143a:	2b 81       	ldd	r18, Y+3	; 0x03
    143c:	3c 81       	ldd	r19, Y+4	; 0x04
    143e:	22 30       	cpi	r18, 0x02	; 2
    1440:	31 05       	cpc	r19, r1
    1442:	2c f4       	brge	.+10     	; 0x144e <GPIO_setupPortDirection+0x3e>
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	61 f0       	breq	.+24     	; 0x1464 <GPIO_setupPortDirection+0x54>
    144c:	1e c0       	rjmp	.+60     	; 0x148a <GPIO_setupPortDirection+0x7a>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	81 f0       	breq	.+32     	; 0x1478 <GPIO_setupPortDirection+0x68>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	83 30       	cpi	r24, 0x03	; 3
    145e:	91 05       	cpc	r25, r1
    1460:	81 f0       	breq	.+32     	; 0x1482 <GPIO_setupPortDirection+0x72>
    1462:	13 c0       	rjmp	.+38     	; 0x148a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1464:	ea e3       	ldi	r30, 0x3A	; 58
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	80 83       	st	Z, r24
    146c:	0e c0       	rjmp	.+28     	; 0x148a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    146e:	e7 e3       	ldi	r30, 0x37	; 55
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	09 c0       	rjmp	.+18     	; 0x148a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1478:	e4 e3       	ldi	r30, 0x34	; 52
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	04 c0       	rjmp	.+8      	; 0x148a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1482:	e1 e3       	ldi	r30, 0x31	; 49
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
			break;
		}
	}
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <GPIO_writePort+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <GPIO_writePort+0x8>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	84 30       	cpi	r24, 0x04	; 4
    14ac:	90 f5       	brcc	.+100    	; 0x1512 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	3c 83       	std	Y+4, r19	; 0x04
    14b6:	2b 83       	std	Y+3, r18	; 0x03
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	9c 81       	ldd	r25, Y+4	; 0x04
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	91 05       	cpc	r25, r1
    14c0:	d1 f0       	breq	.+52     	; 0x14f6 <GPIO_writePort+0x5e>
    14c2:	2b 81       	ldd	r18, Y+3	; 0x03
    14c4:	3c 81       	ldd	r19, Y+4	; 0x04
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	2c f4       	brge	.+10     	; 0x14d6 <GPIO_writePort+0x3e>
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	61 f0       	breq	.+24     	; 0x14ec <GPIO_writePort+0x54>
    14d4:	1e c0       	rjmp	.+60     	; 0x1512 <GPIO_writePort+0x7a>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	81 f0       	breq	.+32     	; 0x1500 <GPIO_writePort+0x68>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	91 05       	cpc	r25, r1
    14e8:	81 f0       	breq	.+32     	; 0x150a <GPIO_writePort+0x72>
    14ea:	13 c0       	rjmp	.+38     	; 0x1512 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14ec:	eb e3       	ldi	r30, 0x3B	; 59
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	80 83       	st	Z, r24
    14f4:	0e c0       	rjmp	.+28     	; 0x1512 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14f6:	e8 e3       	ldi	r30, 0x38	; 56
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	80 83       	st	Z, r24
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1500:	e5 e3       	ldi	r30, 0x35	; 53
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    150a:	e2 e3       	ldi	r30, 0x32	; 50
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
			break;
		}
	}
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <GPIO_readPort+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <GPIO_readPort+0x8>
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    152e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	90 f5       	brcc	.+100    	; 0x159a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3c 83       	std	Y+4, r19	; 0x04
    153e:	2b 83       	std	Y+3, r18	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	91 05       	cpc	r25, r1
    1548:	d1 f0       	breq	.+52     	; 0x157e <GPIO_readPort+0x5e>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	2c f4       	brge	.+10     	; 0x155e <GPIO_readPort+0x3e>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	61 f0       	breq	.+24     	; 0x1574 <GPIO_readPort+0x54>
    155c:	1e c0       	rjmp	.+60     	; 0x159a <GPIO_readPort+0x7a>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	81 f0       	breq	.+32     	; 0x1588 <GPIO_readPort+0x68>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	91 05       	cpc	r25, r1
    1570:	81 f0       	breq	.+32     	; 0x1592 <GPIO_readPort+0x72>
    1572:	13 c0       	rjmp	.+38     	; 0x159a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1574:	e9 e3       	ldi	r30, 0x39	; 57
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	0e c0       	rjmp	.+28     	; 0x159a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    157e:	e6 e3       	ldi	r30, 0x36	; 54
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	09 c0       	rjmp	.+18     	; 0x159a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1588:	e3 e3       	ldi	r30, 0x33	; 51
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	04 c0       	rjmp	.+8      	; 0x159a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1592:	e0 e3       	ldi	r30, 0x30	; 48
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    159a:	89 81       	ldd	r24, Y+1	; 0x01
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	2e 97       	sbiw	r28, 0x0e	; 14
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a0 ea       	ldi	r26, 0xA0	; 160
    15d8:	b1 e4       	ldi	r27, 0x41	; 65
    15da:	8b 87       	std	Y+11, r24	; 0x0b
    15dc:	9c 87       	std	Y+12, r25	; 0x0c
    15de:	ad 87       	std	Y+13, r26	; 0x0d
    15e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a ef       	ldi	r20, 0xFA	; 250
    15f0:	54 e4       	ldi	r21, 0x44	; 68
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	8f 83       	std	Y+7, r24	; 0x07
    15fc:	98 87       	std	Y+8, r25	; 0x08
    15fe:	a9 87       	std	Y+9, r26	; 0x09
    1600:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1602:	6f 81       	ldd	r22, Y+7	; 0x07
    1604:	78 85       	ldd	r23, Y+8	; 0x08
    1606:	89 85       	ldd	r24, Y+9	; 0x09
    1608:	9a 85       	ldd	r25, Y+10	; 0x0a
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e8       	ldi	r20, 0x80	; 128
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1616:	88 23       	and	r24, r24
    1618:	2c f4       	brge	.+10     	; 0x1624 <LCD_init+0x7a>
		__ticks = 1;
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
    1622:	3f c0       	rjmp	.+126    	; 0x16a2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1624:	6f 81       	ldd	r22, Y+7	; 0x07
    1626:	78 85       	ldd	r23, Y+8	; 0x08
    1628:	89 85       	ldd	r24, Y+9	; 0x09
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	57 e4       	ldi	r21, 0x47	; 71
    1634:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1638:	18 16       	cp	r1, r24
    163a:	4c f5       	brge	.+82     	; 0x168e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163c:	6b 85       	ldd	r22, Y+11	; 0x0b
    163e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1640:	8d 85       	ldd	r24, Y+13	; 0x0d
    1642:	9e 85       	ldd	r25, Y+14	; 0x0e
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	40 e2       	ldi	r20, 0x20	; 32
    164a:	51 e4       	ldi	r21, 0x41	; 65
    164c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <LCD_init+0xda>
    1666:	88 ec       	ldi	r24, 0xC8	; 200
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9c 83       	std	Y+4, r25	; 0x04
    166c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <LCD_init+0xc8>
    1676:	9c 83       	std	Y+4, r25	; 0x04
    1678:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	9e 81       	ldd	r25, Y+6	; 0x06
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	9e 83       	std	Y+6, r25	; 0x06
    1682:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	69 f7       	brne	.-38     	; 0x1666 <LCD_init+0xbc>
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	6f 81       	ldd	r22, Y+7	; 0x07
    1690:	78 85       	ldd	r23, Y+8	; 0x08
    1692:	89 85       	ldd	r24, Y+9	; 0x09
    1694:	9a 85       	ldd	r25, Y+10	; 0x0a
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <LCD_init+0x104>
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	63 e0       	ldi	r22, 0x03	; 3
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	64 e0       	ldi	r22, 0x04	; 4
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	65 e0       	ldi	r22, 0x05	; 5
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	66 e0       	ldi	r22, 0x06	; 6
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    16de:	83 e3       	ldi	r24, 0x33	; 51
    16e0:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    16e4:	82 e3       	ldi	r24, 0x32	; 50
    16e6:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    16ea:	88 e2       	ldi	r24, 0x28	; 40
    16ec:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16f0:	8c e0       	ldi	r24, 0x0C	; 12
    16f2:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_sendCommand>
}
    16fc:	2e 96       	adiw	r28, 0x0e	; 14
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	c3 56       	subi	r28, 0x63	; 99
    171c:	d0 40       	sbci	r29, 0x00	; 0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	fe 01       	movw	r30, r28
    172a:	ed 59       	subi	r30, 0x9D	; 157
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	40 e0       	ldi	r20, 0x00	; 0
    1736:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    173a:	fe 01       	movw	r30, r28
    173c:	e1 5a       	subi	r30, 0xA1	; 161
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e8       	ldi	r26, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	80 83       	st	Z, r24
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	a2 83       	std	Z+2, r26	; 0x02
    174e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	8e 01       	movw	r16, r28
    1752:	05 5a       	subi	r16, 0xA5	; 165
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	fe 01       	movw	r30, r28
    1758:	e1 5a       	subi	r30, 0xA1	; 161
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	60 81       	ld	r22, Z
    175e:	71 81       	ldd	r23, Z+1	; 0x01
    1760:	82 81       	ldd	r24, Z+2	; 0x02
    1762:	93 81       	ldd	r25, Z+3	; 0x03
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4a ef       	ldi	r20, 0xFA	; 250
    176a:	54 e4       	ldi	r21, 0x44	; 68
    176c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	80 83       	st	Z, r24
    1778:	91 83       	std	Z+1, r25	; 0x01
    177a:	a2 83       	std	Z+2, r26	; 0x02
    177c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    177e:	fe 01       	movw	r30, r28
    1780:	e5 5a       	subi	r30, 0xA5	; 165
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	44 f4       	brge	.+16     	; 0x17ac <LCD_sendCommand+0x9e>
		__ticks = 1;
    179c:	fe 01       	movw	r30, r28
    179e:	e7 5a       	subi	r30, 0xA7	; 167
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	64 c0       	rjmp	.+200    	; 0x1874 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    17ac:	fe 01       	movw	r30, r28
    17ae:	e5 5a       	subi	r30, 0xA5	; 165
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	3f ef       	ldi	r19, 0xFF	; 255
    17be:	4f e7       	ldi	r20, 0x7F	; 127
    17c0:	57 e4       	ldi	r21, 0x47	; 71
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c6:	18 16       	cp	r1, r24
    17c8:	0c f0       	brlt	.+2      	; 0x17cc <LCD_sendCommand+0xbe>
    17ca:	43 c0       	rjmp	.+134    	; 0x1852 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	fe 01       	movw	r30, r28
    17ce:	e1 5a       	subi	r30, 0xA1	; 161
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8e 01       	movw	r16, r28
    17ec:	07 5a       	subi	r16, 0xA7	; 167
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	bc 01       	movw	r22, r24
    17f2:	cd 01       	movw	r24, r26
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	f8 01       	movw	r30, r16
    17fe:	91 83       	std	Z+1, r25	; 0x01
    1800:	80 83       	st	Z, r24
    1802:	1f c0       	rjmp	.+62     	; 0x1842 <LCD_sendCommand+0x134>
    1804:	fe 01       	movw	r30, r28
    1806:	e9 5a       	subi	r30, 0xA9	; 169
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	88 ec       	ldi	r24, 0xC8	; 200
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24
    1812:	fe 01       	movw	r30, r28
    1814:	e9 5a       	subi	r30, 0xA9	; 169
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_sendCommand+0x10e>
    1820:	fe 01       	movw	r30, r28
    1822:	e9 5a       	subi	r30, 0xA9	; 169
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	de 01       	movw	r26, r28
    182c:	a7 5a       	subi	r26, 0xA7	; 167
    182e:	bf 4f       	sbci	r27, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	e7 5a       	subi	r30, 0xA7	; 167
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1842:	fe 01       	movw	r30, r28
    1844:	e7 5a       	subi	r30, 0xA7	; 167
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	d1 f6       	brne	.-76     	; 0x1804 <LCD_sendCommand+0xf6>
    1850:	27 c0       	rjmp	.+78     	; 0x18a0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	8e 01       	movw	r16, r28
    1854:	07 5a       	subi	r16, 0xA7	; 167
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e5 5a       	subi	r30, 0xA5	; 165
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	82 81       	ldd	r24, Z+2	; 0x02
    1864:	93 81       	ldd	r25, Z+3	; 0x03
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	f8 01       	movw	r30, r16
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
    1874:	de 01       	movw	r26, r28
    1876:	ab 5a       	subi	r26, 0xAB	; 171
    1878:	bf 4f       	sbci	r27, 0xFF	; 255
    187a:	fe 01       	movw	r30, r28
    187c:	e7 5a       	subi	r30, 0xA7	; 167
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	8d 93       	st	X+, r24
    1886:	9c 93       	st	X, r25
    1888:	fe 01       	movw	r30, r28
    188a:	eb 5a       	subi	r30, 0xAB	; 171
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_sendCommand+0x184>
    1896:	fe 01       	movw	r30, r28
    1898:	eb 5a       	subi	r30, 0xAB	; 171
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    18aa:	fe 01       	movw	r30, r28
    18ac:	ef 5a       	subi	r30, 0xAF	; 175
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e8       	ldi	r26, 0x80	; 128
    18b6:	bf e3       	ldi	r27, 0x3F	; 63
    18b8:	80 83       	st	Z, r24
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	8e 01       	movw	r16, r28
    18c2:	03 5b       	subi	r16, 0xB3	; 179
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	fe 01       	movw	r30, r28
    18c8:	ef 5a       	subi	r30, 0xAF	; 175
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a ef       	ldi	r20, 0xFA	; 250
    18da:	54 e4       	ldi	r21, 0x44	; 68
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	f8 01       	movw	r30, r16
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ee:	fe 01       	movw	r30, r28
    18f0:	e3 5b       	subi	r30, 0xB3	; 179
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	44 f4       	brge	.+16     	; 0x191c <LCD_sendCommand+0x20e>
		__ticks = 1;
    190c:	fe 01       	movw	r30, r28
    190e:	e5 5b       	subi	r30, 0xB5	; 181
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
    191a:	64 c0       	rjmp	.+200    	; 0x19e4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    191c:	fe 01       	movw	r30, r28
    191e:	e3 5b       	subi	r30, 0xB3	; 179
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	0c f0       	brlt	.+2      	; 0x193c <LCD_sendCommand+0x22e>
    193a:	43 c0       	rjmp	.+134    	; 0x19c2 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193c:	fe 01       	movw	r30, r28
    193e:	ef 5a       	subi	r30, 0xAF	; 175
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e2       	ldi	r20, 0x20	; 32
    1950:	51 e4       	ldi	r21, 0x41	; 65
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8e 01       	movw	r16, r28
    195c:	05 5b       	subi	r16, 0xB5	; 181
    195e:	1f 4f       	sbci	r17, 0xFF	; 255
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	f8 01       	movw	r30, r16
    196e:	91 83       	std	Z+1, r25	; 0x01
    1970:	80 83       	st	Z, r24
    1972:	1f c0       	rjmp	.+62     	; 0x19b2 <LCD_sendCommand+0x2a4>
    1974:	fe 01       	movw	r30, r28
    1976:	e7 5b       	subi	r30, 0xB7	; 183
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	88 ec       	ldi	r24, 0xC8	; 200
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
    1982:	fe 01       	movw	r30, r28
    1984:	e7 5b       	subi	r30, 0xB7	; 183
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	80 81       	ld	r24, Z
    198a:	91 81       	ldd	r25, Z+1	; 0x01
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	f1 f7       	brne	.-4      	; 0x198c <LCD_sendCommand+0x27e>
    1990:	fe 01       	movw	r30, r28
    1992:	e7 5b       	subi	r30, 0xB7	; 183
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199a:	de 01       	movw	r26, r28
    199c:	a5 5b       	subi	r26, 0xB5	; 181
    199e:	bf 4f       	sbci	r27, 0xFF	; 255
    19a0:	fe 01       	movw	r30, r28
    19a2:	e5 5b       	subi	r30, 0xB5	; 181
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	11 96       	adiw	r26, 0x01	; 1
    19ae:	9c 93       	st	X, r25
    19b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	fe 01       	movw	r30, r28
    19b4:	e5 5b       	subi	r30, 0xB5	; 181
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	d1 f6       	brne	.-76     	; 0x1974 <LCD_sendCommand+0x266>
    19c0:	27 c0       	rjmp	.+78     	; 0x1a10 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	8e 01       	movw	r16, r28
    19c4:	05 5b       	subi	r16, 0xB5	; 181
    19c6:	1f 4f       	sbci	r17, 0xFF	; 255
    19c8:	fe 01       	movw	r30, r28
    19ca:	e3 5b       	subi	r30, 0xB3	; 179
    19cc:	ff 4f       	sbci	r31, 0xFF	; 255
    19ce:	60 81       	ld	r22, Z
    19d0:	71 81       	ldd	r23, Z+1	; 0x01
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	f8 01       	movw	r30, r16
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	de 01       	movw	r26, r28
    19e6:	a9 5b       	subi	r26, 0xB9	; 185
    19e8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e5 5b       	subi	r30, 0xB5	; 181
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	80 81       	ld	r24, Z
    19f2:	91 81       	ldd	r25, Z+1	; 0x01
    19f4:	8d 93       	st	X+, r24
    19f6:	9c 93       	st	X, r25
    19f8:	fe 01       	movw	r30, r28
    19fa:	e9 5b       	subi	r30, 0xB9	; 185
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	91 81       	ldd	r25, Z+1	; 0x01
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_sendCommand+0x2f4>
    1a06:	fe 01       	movw	r30, r28
    1a08:	e9 5b       	subi	r30, 0xB9	; 185
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1a10:	fe 01       	movw	r30, r28
    1a12:	ed 59       	subi	r30, 0x9D	; 157
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	88 2f       	mov	r24, r24
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	80 71       	andi	r24, 0x10	; 16
    1a1e:	90 70       	andi	r25, 0x00	; 0
    1a20:	95 95       	asr	r25
    1a22:	87 95       	ror	r24
    1a24:	95 95       	asr	r25
    1a26:	87 95       	ror	r24
    1a28:	95 95       	asr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	95 95       	asr	r25
    1a2e:	87 95       	ror	r24
    1a30:	98 2f       	mov	r25, r24
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	63 e0       	ldi	r22, 0x03	; 3
    1a36:	49 2f       	mov	r20, r25
    1a38:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	ed 59       	subi	r30, 0x9D	; 157
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	80 72       	andi	r24, 0x20	; 32
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	95 95       	asr	r25
    1a4e:	87 95       	ror	r24
    1a50:	95 95       	asr	r25
    1a52:	87 95       	ror	r24
    1a54:	95 95       	asr	r25
    1a56:	87 95       	ror	r24
    1a58:	95 95       	asr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	95 95       	asr	r25
    1a5e:	87 95       	ror	r24
    1a60:	98 2f       	mov	r25, r24
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	64 e0       	ldi	r22, 0x04	; 4
    1a66:	49 2f       	mov	r20, r25
    1a68:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ed 59       	subi	r30, 0x9D	; 157
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	80 74       	andi	r24, 0x40	; 64
    1a7a:	90 70       	andi	r25, 0x00	; 0
    1a7c:	08 2e       	mov	r0, r24
    1a7e:	89 2f       	mov	r24, r25
    1a80:	00 0c       	add	r0, r0
    1a82:	88 1f       	adc	r24, r24
    1a84:	99 0b       	sbc	r25, r25
    1a86:	00 0c       	add	r0, r0
    1a88:	88 1f       	adc	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	65 e0       	ldi	r22, 0x05	; 5
    1a92:	49 2f       	mov	r20, r25
    1a94:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ed 59       	subi	r30, 0x9D	; 157
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	99 27       	eor	r25, r25
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	66 e0       	ldi	r22, 0x06	; 6
    1aac:	49 2f       	mov	r20, r25
    1aae:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ed 5b       	subi	r30, 0xBD	; 189
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e8       	ldi	r26, 0x80	; 128
    1abe:	bf e3       	ldi	r27, 0x3F	; 63
    1ac0:	80 83       	st	Z, r24
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	a2 83       	std	Z+2, r26	; 0x02
    1ac6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac8:	8e 01       	movw	r16, r28
    1aca:	01 5c       	subi	r16, 0xC1	; 193
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	fe 01       	movw	r30, r28
    1ad0:	ed 5b       	subi	r30, 0xBD	; 189
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4a ef       	ldi	r20, 0xFA	; 250
    1ae2:	54 e4       	ldi	r21, 0x44	; 68
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	f8 01       	movw	r30, r16
    1aee:	80 83       	st	Z, r24
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	a2 83       	std	Z+2, r26	; 0x02
    1af4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af6:	fe 01       	movw	r30, r28
    1af8:	ff 96       	adiw	r30, 0x3f	; 63
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <LCD_sendCommand+0x40e>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9e af       	std	Y+62, r25	; 0x3e
    1b18:	8d af       	std	Y+61, r24	; 0x3d
    1b1a:	46 c0       	rjmp	.+140    	; 0x1ba8 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ff 96       	adiw	r30, 0x3f	; 63
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	64 f5       	brge	.+88     	; 0x1b90 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	fe 01       	movw	r30, r28
    1b3a:	ed 5b       	subi	r30, 0xBD	; 189
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	bc 01       	movw	r22, r24
    1b58:	cd 01       	movw	r24, r26
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9e af       	std	Y+62, r25	; 0x3e
    1b64:	8d af       	std	Y+61, r24	; 0x3d
    1b66:	0f c0       	rjmp	.+30     	; 0x1b86 <LCD_sendCommand+0x478>
    1b68:	88 ec       	ldi	r24, 0xC8	; 200
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9c af       	std	Y+60, r25	; 0x3c
    1b6e:	8b af       	std	Y+59, r24	; 0x3b
    1b70:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b72:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_sendCommand+0x466>
    1b78:	9c af       	std	Y+60, r25	; 0x3c
    1b7a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	9e af       	std	Y+62, r25	; 0x3e
    1b84:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b86:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b88:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	69 f7       	brne	.-38     	; 0x1b68 <LCD_sendCommand+0x45a>
    1b8e:	16 c0       	rjmp	.+44     	; 0x1bbc <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b90:	fe 01       	movw	r30, r28
    1b92:	ff 96       	adiw	r30, 0x3f	; 63
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9e af       	std	Y+62, r25	; 0x3e
    1ba6:	8d af       	std	Y+61, r24	; 0x3d
    1ba8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1baa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bac:	9a af       	std	Y+58, r25	; 0x3a
    1bae:	89 af       	std	Y+57, r24	; 0x39
    1bb0:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_sendCommand+0x4a6>
    1bb8:	9a af       	std	Y+58, r25	; 0x3a
    1bba:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	a0 e8       	ldi	r26, 0x80	; 128
    1bcc:	bf e3       	ldi	r27, 0x3F	; 63
    1bce:	8d ab       	std	Y+53, r24	; 0x35
    1bd0:	9e ab       	std	Y+54, r25	; 0x36
    1bd2:	af ab       	std	Y+55, r26	; 0x37
    1bd4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd6:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd8:	7e a9       	ldd	r23, Y+54	; 0x36
    1bda:	8f a9       	ldd	r24, Y+55	; 0x37
    1bdc:	98 ad       	ldd	r25, Y+56	; 0x38
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	4a ef       	ldi	r20, 0xFA	; 250
    1be4:	54 e4       	ldi	r21, 0x44	; 68
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	89 ab       	std	Y+49, r24	; 0x31
    1bf0:	9a ab       	std	Y+50, r25	; 0x32
    1bf2:	ab ab       	std	Y+51, r26	; 0x33
    1bf4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bf6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bf8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bfa:	8b a9       	ldd	r24, Y+51	; 0x33
    1bfc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e8       	ldi	r20, 0x80	; 128
    1c04:	5f e3       	ldi	r21, 0x3F	; 63
    1c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0a:	88 23       	and	r24, r24
    1c0c:	2c f4       	brge	.+10     	; 0x1c18 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	98 ab       	std	Y+48, r25	; 0x30
    1c14:	8f a7       	std	Y+47, r24	; 0x2f
    1c16:	3f c0       	rjmp	.+126    	; 0x1c96 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1c18:	69 a9       	ldd	r22, Y+49	; 0x31
    1c1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	4c f5       	brge	.+82     	; 0x1c82 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c30:	6d a9       	ldd	r22, Y+53	; 0x35
    1c32:	7e a9       	ldd	r23, Y+54	; 0x36
    1c34:	8f a9       	ldd	r24, Y+55	; 0x37
    1c36:	98 ad       	ldd	r25, Y+56	; 0x38
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e2       	ldi	r20, 0x20	; 32
    1c3e:	51 e4       	ldi	r21, 0x41	; 65
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	98 ab       	std	Y+48, r25	; 0x30
    1c56:	8f a7       	std	Y+47, r24	; 0x2f
    1c58:	0f c0       	rjmp	.+30     	; 0x1c78 <LCD_sendCommand+0x56a>
    1c5a:	88 ec       	ldi	r24, 0xC8	; 200
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e a7       	std	Y+46, r25	; 0x2e
    1c60:	8d a7       	std	Y+45, r24	; 0x2d
    1c62:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c64:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_sendCommand+0x558>
    1c6a:	9e a7       	std	Y+46, r25	; 0x2e
    1c6c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c70:	98 a9       	ldd	r25, Y+48	; 0x30
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	98 ab       	std	Y+48, r25	; 0x30
    1c76:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	69 f7       	brne	.-38     	; 0x1c5a <LCD_sendCommand+0x54c>
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	69 a9       	ldd	r22, Y+49	; 0x31
    1c84:	7a a9       	ldd	r23, Y+50	; 0x32
    1c86:	8b a9       	ldd	r24, Y+51	; 0x33
    1c88:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	98 ab       	std	Y+48, r25	; 0x30
    1c94:	8f a7       	std	Y+47, r24	; 0x2f
    1c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c98:	98 a9       	ldd	r25, Y+48	; 0x30
    1c9a:	9c a7       	std	Y+44, r25	; 0x2c
    1c9c:	8b a7       	std	Y+43, r24	; 0x2b
    1c9e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_sendCommand+0x594>
    1ca6:	9c a7       	std	Y+44, r25	; 0x2c
    1ca8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	61 e0       	ldi	r22, 0x01	; 1
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e8       	ldi	r26, 0x80	; 128
    1cba:	bf e3       	ldi	r27, 0x3F	; 63
    1cbc:	8f a3       	std	Y+39, r24	; 0x27
    1cbe:	98 a7       	std	Y+40, r25	; 0x28
    1cc0:	a9 a7       	std	Y+41, r26	; 0x29
    1cc2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a ef       	ldi	r20, 0xFA	; 250
    1cd2:	54 e4       	ldi	r21, 0x44	; 68
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8b a3       	std	Y+35, r24	; 0x23
    1cde:	9c a3       	std	Y+36, r25	; 0x24
    1ce0:	ad a3       	std	Y+37, r26	; 0x25
    1ce2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cea:	9e a1       	ldd	r25, Y+38	; 0x26
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	2c f4       	brge	.+10     	; 0x1d06 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	9a a3       	std	Y+34, r25	; 0x22
    1d02:	89 a3       	std	Y+33, r24	; 0x21
    1d04:	3f c0       	rjmp	.+126    	; 0x1d84 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1d06:	6b a1       	ldd	r22, Y+35	; 0x23
    1d08:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	3f ef       	ldi	r19, 0xFF	; 255
    1d12:	4f e7       	ldi	r20, 0x7F	; 127
    1d14:	57 e4       	ldi	r21, 0x47	; 71
    1d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d1a:	18 16       	cp	r1, r24
    1d1c:	4c f5       	brge	.+82     	; 0x1d70 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d20:	78 a5       	ldd	r23, Y+40	; 0x28
    1d22:	89 a5       	ldd	r24, Y+41	; 0x29
    1d24:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9a a3       	std	Y+34, r25	; 0x22
    1d44:	89 a3       	std	Y+33, r24	; 0x21
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <LCD_sendCommand+0x658>
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	98 a3       	std	Y+32, r25	; 0x20
    1d4e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d52:	98 a1       	ldd	r25, Y+32	; 0x20
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <LCD_sendCommand+0x646>
    1d58:	98 a3       	std	Y+32, r25	; 0x20
    1d5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9a a3       	std	Y+34, r25	; 0x22
    1d64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	89 a1       	ldd	r24, Y+33	; 0x21
    1d68:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <LCD_sendCommand+0x63a>
    1d6e:	14 c0       	rjmp	.+40     	; 0x1d98 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	6b a1       	ldd	r22, Y+35	; 0x23
    1d72:	7c a1       	ldd	r23, Y+36	; 0x24
    1d74:	8d a1       	ldd	r24, Y+37	; 0x25
    1d76:	9e a1       	ldd	r25, Y+38	; 0x26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
    1d84:	89 a1       	ldd	r24, Y+33	; 0x21
    1d86:	9a a1       	ldd	r25, Y+34	; 0x22
    1d88:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d90:	01 97       	sbiw	r24, 0x01	; 1
    1d92:	f1 f7       	brne	.-4      	; 0x1d90 <LCD_sendCommand+0x682>
    1d94:	9e 8f       	std	Y+30, r25	; 0x1e
    1d96:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1d98:	fe 01       	movw	r30, r28
    1d9a:	ed 59       	subi	r30, 0x9D	; 157
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	98 2f       	mov	r25, r24
    1da2:	91 70       	andi	r25, 0x01	; 1
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	63 e0       	ldi	r22, 0x03	; 3
    1da8:	49 2f       	mov	r20, r25
    1daa:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1dae:	fe 01       	movw	r30, r28
    1db0:	ed 59       	subi	r30, 0x9D	; 157
    1db2:	ff 4f       	sbci	r31, 0xFF	; 255
    1db4:	80 81       	ld	r24, Z
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	82 70       	andi	r24, 0x02	; 2
    1dbc:	90 70       	andi	r25, 0x00	; 0
    1dbe:	95 95       	asr	r25
    1dc0:	87 95       	ror	r24
    1dc2:	98 2f       	mov	r25, r24
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	64 e0       	ldi	r22, 0x04	; 4
    1dc8:	49 2f       	mov	r20, r25
    1dca:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1dce:	fe 01       	movw	r30, r28
    1dd0:	ed 59       	subi	r30, 0x9D	; 157
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	88 2f       	mov	r24, r24
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	84 70       	andi	r24, 0x04	; 4
    1ddc:	90 70       	andi	r25, 0x00	; 0
    1dde:	95 95       	asr	r25
    1de0:	87 95       	ror	r24
    1de2:	95 95       	asr	r25
    1de4:	87 95       	ror	r24
    1de6:	98 2f       	mov	r25, r24
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	65 e0       	ldi	r22, 0x05	; 5
    1dec:	49 2f       	mov	r20, r25
    1dee:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1df2:	fe 01       	movw	r30, r28
    1df4:	ed 59       	subi	r30, 0x9D	; 157
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	88 70       	andi	r24, 0x08	; 8
    1e00:	90 70       	andi	r25, 0x00	; 0
    1e02:	95 95       	asr	r25
    1e04:	87 95       	ror	r24
    1e06:	95 95       	asr	r25
    1e08:	87 95       	ror	r24
    1e0a:	95 95       	asr	r25
    1e0c:	87 95       	ror	r24
    1e0e:	98 2f       	mov	r25, r24
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	66 e0       	ldi	r22, 0x06	; 6
    1e14:	49 2f       	mov	r20, r25
    1e16:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a0 e8       	ldi	r26, 0x80	; 128
    1e20:	bf e3       	ldi	r27, 0x3F	; 63
    1e22:	89 8f       	std	Y+25, r24	; 0x19
    1e24:	9a 8f       	std	Y+26, r25	; 0x1a
    1e26:	ab 8f       	std	Y+27, r26	; 0x1b
    1e28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a ef       	ldi	r20, 0xFA	; 250
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	8d 8b       	std	Y+21, r24	; 0x15
    1e44:	9e 8b       	std	Y+22, r25	; 0x16
    1e46:	af 8b       	std	Y+23, r26	; 0x17
    1e48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e50:	98 8d       	ldd	r25, Y+24	; 0x18
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e8       	ldi	r20, 0x80	; 128
    1e58:	5f e3       	ldi	r21, 0x3F	; 63
    1e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5e:	88 23       	and	r24, r24
    1e60:	2c f4       	brge	.+10     	; 0x1e6c <LCD_sendCommand+0x75e>
		__ticks = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9c 8b       	std	Y+20, r25	; 0x14
    1e68:	8b 8b       	std	Y+19, r24	; 0x13
    1e6a:	3f c0       	rjmp	.+126    	; 0x1eea <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1e6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e70:	8f 89       	ldd	r24, Y+23	; 0x17
    1e72:	98 8d       	ldd	r25, Y+24	; 0x18
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	3f ef       	ldi	r19, 0xFF	; 255
    1e78:	4f e7       	ldi	r20, 0x7F	; 127
    1e7a:	57 e4       	ldi	r21, 0x47	; 71
    1e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e80:	18 16       	cp	r1, r24
    1e82:	4c f5       	brge	.+82     	; 0x1ed6 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	69 8d       	ldd	r22, Y+25	; 0x19
    1e86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e2       	ldi	r20, 0x20	; 32
    1e92:	51 e4       	ldi	r21, 0x41	; 65
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9c 8b       	std	Y+20, r25	; 0x14
    1eaa:	8b 8b       	std	Y+19, r24	; 0x13
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <LCD_sendCommand+0x7be>
    1eae:	88 ec       	ldi	r24, 0xC8	; 200
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9a 8b       	std	Y+18, r25	; 0x12
    1eb4:	89 8b       	std	Y+17, r24	; 0x11
    1eb6:	89 89       	ldd	r24, Y+17	; 0x11
    1eb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_sendCommand+0x7ac>
    1ebe:	9a 8b       	std	Y+18, r25	; 0x12
    1ec0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	9c 8b       	std	Y+20, r25	; 0x14
    1eca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ece:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <LCD_sendCommand+0x7a0>
    1ed4:	14 c0       	rjmp	.+40     	; 0x1efe <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed8:	7e 89       	ldd	r23, Y+22	; 0x16
    1eda:	8f 89       	ldd	r24, Y+23	; 0x17
    1edc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9c 8b       	std	Y+20, r25	; 0x14
    1ee8:	8b 8b       	std	Y+19, r24	; 0x13
    1eea:	8b 89       	ldd	r24, Y+19	; 0x13
    1eec:	9c 89       	ldd	r25, Y+20	; 0x14
    1eee:	98 8b       	std	Y+16, r25	; 0x10
    1ef0:	8f 87       	std	Y+15, r24	; 0x0f
    1ef2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef4:	98 89       	ldd	r25, Y+16	; 0x10
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_sendCommand+0x7e8>
    1efa:	98 8b       	std	Y+16, r25	; 0x10
    1efc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	61 e0       	ldi	r22, 0x01	; 1
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	a0 e8       	ldi	r26, 0x80	; 128
    1f0e:	bf e3       	ldi	r27, 0x3F	; 63
    1f10:	8b 87       	std	Y+11, r24	; 0x0b
    1f12:	9c 87       	std	Y+12, r25	; 0x0c
    1f14:	ad 87       	std	Y+13, r26	; 0x0d
    1f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a ef       	ldi	r20, 0xFA	; 250
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8f 83       	std	Y+7, r24	; 0x07
    1f32:	98 87       	std	Y+8, r25	; 0x08
    1f34:	a9 87       	std	Y+9, r26	; 0x09
    1f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <LCD_sendCommand+0x84c>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <LCD_sendCommand+0x8ac>
    1f9c:	88 ec       	ldi	r24, 0xC8	; 200
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_sendCommand+0x89a>
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <LCD_sendCommand+0x88e>
    1fc2:	14 c0       	rjmp	.+40     	; 0x1fec <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc6:	78 85       	ldd	r23, Y+8	; 0x08
    1fc8:	89 85       	ldd	r24, Y+9	; 0x09
    1fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_sendCommand+0x8d6>
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1fec:	cd 59       	subi	r28, 0x9D	; 157
    1fee:	df 4f       	sbci	r29, 0xFF	; 255
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	c3 56       	subi	r28, 0x63	; 99
    2012:	d0 40       	sbci	r29, 0x00	; 0
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	fe 01       	movw	r30, r28
    2020:	ed 59       	subi	r30, 0x9D	; 157
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    2030:	fe 01       	movw	r30, r28
    2032:	e1 5a       	subi	r30, 0xA1	; 161
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e8       	ldi	r26, 0x80	; 128
    203c:	bf e3       	ldi	r27, 0x3F	; 63
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	a2 83       	std	Z+2, r26	; 0x02
    2044:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	8e 01       	movw	r16, r28
    2048:	05 5a       	subi	r16, 0xA5	; 165
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	e1 5a       	subi	r30, 0xA1	; 161
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	f8 01       	movw	r30, r16
    206c:	80 83       	st	Z, r24
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	a2 83       	std	Z+2, r26	; 0x02
    2072:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2074:	fe 01       	movw	r30, r28
    2076:	e5 5a       	subi	r30, 0xA5	; 165
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	44 f4       	brge	.+16     	; 0x20a2 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2092:	fe 01       	movw	r30, r28
    2094:	e7 5a       	subi	r30, 0xA7	; 167
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
    20a0:	64 c0       	rjmp	.+200    	; 0x216a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    20a2:	fe 01       	movw	r30, r28
    20a4:	e5 5a       	subi	r30, 0xA5	; 165
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	0c f0       	brlt	.+2      	; 0x20c2 <LCD_displayCharacter+0xbe>
    20c0:	43 c0       	rjmp	.+134    	; 0x2148 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	fe 01       	movw	r30, r28
    20c4:	e1 5a       	subi	r30, 0xA1	; 161
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8e 01       	movw	r16, r28
    20e2:	07 5a       	subi	r16, 0xA7	; 167
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	f8 01       	movw	r30, r16
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	1f c0       	rjmp	.+62     	; 0x2138 <LCD_displayCharacter+0x134>
    20fa:	fe 01       	movw	r30, r28
    20fc:	e9 5a       	subi	r30, 0xA9	; 169
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	fe 01       	movw	r30, r28
    210a:	e9 5a       	subi	r30, 0xA9	; 169
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_displayCharacter+0x10e>
    2116:	fe 01       	movw	r30, r28
    2118:	e9 5a       	subi	r30, 0xA9	; 169
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	de 01       	movw	r26, r28
    2122:	a7 5a       	subi	r26, 0xA7	; 167
    2124:	bf 4f       	sbci	r27, 0xFF	; 255
    2126:	fe 01       	movw	r30, r28
    2128:	e7 5a       	subi	r30, 0xA7	; 167
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	91 81       	ldd	r25, Z+1	; 0x01
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	11 96       	adiw	r26, 0x01	; 1
    2134:	9c 93       	st	X, r25
    2136:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	fe 01       	movw	r30, r28
    213a:	e7 5a       	subi	r30, 0xA7	; 167
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	d1 f6       	brne	.-76     	; 0x20fa <LCD_displayCharacter+0xf6>
    2146:	27 c0       	rjmp	.+78     	; 0x2196 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	8e 01       	movw	r16, r28
    214a:	07 5a       	subi	r16, 0xA7	; 167
    214c:	1f 4f       	sbci	r17, 0xFF	; 255
    214e:	fe 01       	movw	r30, r28
    2150:	e5 5a       	subi	r30, 0xA5	; 165
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	f8 01       	movw	r30, r16
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	80 83       	st	Z, r24
    216a:	de 01       	movw	r26, r28
    216c:	ab 5a       	subi	r26, 0xAB	; 171
    216e:	bf 4f       	sbci	r27, 0xFF	; 255
    2170:	fe 01       	movw	r30, r28
    2172:	e7 5a       	subi	r30, 0xA7	; 167
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	8d 93       	st	X+, r24
    217c:	9c 93       	st	X, r25
    217e:	fe 01       	movw	r30, r28
    2180:	eb 5a       	subi	r30, 0xAB	; 171
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_displayCharacter+0x184>
    218c:	fe 01       	movw	r30, r28
    218e:	eb 5a       	subi	r30, 0xAB	; 171
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    21a0:	fe 01       	movw	r30, r28
    21a2:	ef 5a       	subi	r30, 0xAF	; 175
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e8       	ldi	r26, 0x80	; 128
    21ac:	bf e3       	ldi	r27, 0x3F	; 63
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	a2 83       	std	Z+2, r26	; 0x02
    21b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	8e 01       	movw	r16, r28
    21b8:	03 5b       	subi	r16, 0xB3	; 179
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	fe 01       	movw	r30, r28
    21be:	ef 5a       	subi	r30, 0xAF	; 175
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a ef       	ldi	r20, 0xFA	; 250
    21d0:	54 e4       	ldi	r21, 0x44	; 68
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	f8 01       	movw	r30, r16
    21dc:	80 83       	st	Z, r24
    21de:	91 83       	std	Z+1, r25	; 0x01
    21e0:	a2 83       	std	Z+2, r26	; 0x02
    21e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e4:	fe 01       	movw	r30, r28
    21e6:	e3 5b       	subi	r30, 0xB3	; 179
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	60 81       	ld	r22, Z
    21ec:	71 81       	ldd	r23, Z+1	; 0x01
    21ee:	82 81       	ldd	r24, Z+2	; 0x02
    21f0:	93 81       	ldd	r25, Z+3	; 0x03
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	44 f4       	brge	.+16     	; 0x2212 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2202:	fe 01       	movw	r30, r28
    2204:	e5 5b       	subi	r30, 0xB5	; 181
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	80 83       	st	Z, r24
    2210:	64 c0       	rjmp	.+200    	; 0x22da <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2212:	fe 01       	movw	r30, r28
    2214:	e3 5b       	subi	r30, 0xB3	; 179
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	0c f0       	brlt	.+2      	; 0x2232 <LCD_displayCharacter+0x22e>
    2230:	43 c0       	rjmp	.+134    	; 0x22b8 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2232:	fe 01       	movw	r30, r28
    2234:	ef 5a       	subi	r30, 0xAF	; 175
    2236:	ff 4f       	sbci	r31, 0xFF	; 255
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	82 81       	ldd	r24, Z+2	; 0x02
    223e:	93 81       	ldd	r25, Z+3	; 0x03
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	51 e4       	ldi	r21, 0x41	; 65
    2248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	8e 01       	movw	r16, r28
    2252:	05 5b       	subi	r16, 0xB5	; 181
    2254:	1f 4f       	sbci	r17, 0xFF	; 255
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	f8 01       	movw	r30, r16
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	1f c0       	rjmp	.+62     	; 0x22a8 <LCD_displayCharacter+0x2a4>
    226a:	fe 01       	movw	r30, r28
    226c:	e7 5b       	subi	r30, 0xB7	; 183
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	88 ec       	ldi	r24, 0xC8	; 200
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24
    2278:	fe 01       	movw	r30, r28
    227a:	e7 5b       	subi	r30, 0xB7	; 183
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_displayCharacter+0x27e>
    2286:	fe 01       	movw	r30, r28
    2288:	e7 5b       	subi	r30, 0xB7	; 183
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	91 83       	std	Z+1, r25	; 0x01
    228e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	de 01       	movw	r26, r28
    2292:	a5 5b       	subi	r26, 0xB5	; 181
    2294:	bf 4f       	sbci	r27, 0xFF	; 255
    2296:	fe 01       	movw	r30, r28
    2298:	e5 5b       	subi	r30, 0xB5	; 181
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	11 96       	adiw	r26, 0x01	; 1
    22a4:	9c 93       	st	X, r25
    22a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	fe 01       	movw	r30, r28
    22aa:	e5 5b       	subi	r30, 0xB5	; 181
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	d1 f6       	brne	.-76     	; 0x226a <LCD_displayCharacter+0x266>
    22b6:	27 c0       	rjmp	.+78     	; 0x2306 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	8e 01       	movw	r16, r28
    22ba:	05 5b       	subi	r16, 0xB5	; 181
    22bc:	1f 4f       	sbci	r17, 0xFF	; 255
    22be:	fe 01       	movw	r30, r28
    22c0:	e3 5b       	subi	r30, 0xB3	; 179
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	60 81       	ld	r22, Z
    22c6:	71 81       	ldd	r23, Z+1	; 0x01
    22c8:	82 81       	ldd	r24, Z+2	; 0x02
    22ca:	93 81       	ldd	r25, Z+3	; 0x03
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	f8 01       	movw	r30, r16
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
    22da:	de 01       	movw	r26, r28
    22dc:	a9 5b       	subi	r26, 0xB9	; 185
    22de:	bf 4f       	sbci	r27, 0xFF	; 255
    22e0:	fe 01       	movw	r30, r28
    22e2:	e5 5b       	subi	r30, 0xB5	; 181
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	8d 93       	st	X+, r24
    22ec:	9c 93       	st	X, r25
    22ee:	fe 01       	movw	r30, r28
    22f0:	e9 5b       	subi	r30, 0xB9	; 185
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_displayCharacter+0x2f4>
    22fc:	fe 01       	movw	r30, r28
    22fe:	e9 5b       	subi	r30, 0xB9	; 185
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2306:	fe 01       	movw	r30, r28
    2308:	ed 59       	subi	r30, 0x9D	; 157
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 81       	ld	r24, Z
    230e:	88 2f       	mov	r24, r24
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	80 71       	andi	r24, 0x10	; 16
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	95 95       	asr	r25
    2318:	87 95       	ror	r24
    231a:	95 95       	asr	r25
    231c:	87 95       	ror	r24
    231e:	95 95       	asr	r25
    2320:	87 95       	ror	r24
    2322:	95 95       	asr	r25
    2324:	87 95       	ror	r24
    2326:	98 2f       	mov	r25, r24
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	63 e0       	ldi	r22, 0x03	; 3
    232c:	49 2f       	mov	r20, r25
    232e:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2332:	fe 01       	movw	r30, r28
    2334:	ed 59       	subi	r30, 0x9D	; 157
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	80 72       	andi	r24, 0x20	; 32
    2340:	90 70       	andi	r25, 0x00	; 0
    2342:	95 95       	asr	r25
    2344:	87 95       	ror	r24
    2346:	95 95       	asr	r25
    2348:	87 95       	ror	r24
    234a:	95 95       	asr	r25
    234c:	87 95       	ror	r24
    234e:	95 95       	asr	r25
    2350:	87 95       	ror	r24
    2352:	95 95       	asr	r25
    2354:	87 95       	ror	r24
    2356:	98 2f       	mov	r25, r24
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	64 e0       	ldi	r22, 0x04	; 4
    235c:	49 2f       	mov	r20, r25
    235e:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2362:	fe 01       	movw	r30, r28
    2364:	ed 59       	subi	r30, 0x9D	; 157
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	80 74       	andi	r24, 0x40	; 64
    2370:	90 70       	andi	r25, 0x00	; 0
    2372:	08 2e       	mov	r0, r24
    2374:	89 2f       	mov	r24, r25
    2376:	00 0c       	add	r0, r0
    2378:	88 1f       	adc	r24, r24
    237a:	99 0b       	sbc	r25, r25
    237c:	00 0c       	add	r0, r0
    237e:	88 1f       	adc	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	98 2f       	mov	r25, r24
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	65 e0       	ldi	r22, 0x05	; 5
    2388:	49 2f       	mov	r20, r25
    238a:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    238e:	fe 01       	movw	r30, r28
    2390:	ed 59       	subi	r30, 0x9D	; 157
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	98 2f       	mov	r25, r24
    2398:	99 1f       	adc	r25, r25
    239a:	99 27       	eor	r25, r25
    239c:	99 1f       	adc	r25, r25
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	66 e0       	ldi	r22, 0x06	; 6
    23a2:	49 2f       	mov	r20, r25
    23a4:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    23a8:	fe 01       	movw	r30, r28
    23aa:	ed 5b       	subi	r30, 0xBD	; 189
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e8       	ldi	r26, 0x80	; 128
    23b4:	bf e3       	ldi	r27, 0x3F	; 63
    23b6:	80 83       	st	Z, r24
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	a2 83       	std	Z+2, r26	; 0x02
    23bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	8e 01       	movw	r16, r28
    23c0:	01 5c       	subi	r16, 0xC1	; 193
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	fe 01       	movw	r30, r28
    23c6:	ed 5b       	subi	r30, 0xBD	; 189
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	60 81       	ld	r22, Z
    23cc:	71 81       	ldd	r23, Z+1	; 0x01
    23ce:	82 81       	ldd	r24, Z+2	; 0x02
    23d0:	93 81       	ldd	r25, Z+3	; 0x03
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a ef       	ldi	r20, 0xFA	; 250
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	f8 01       	movw	r30, r16
    23e4:	80 83       	st	Z, r24
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	a2 83       	std	Z+2, r26	; 0x02
    23ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ec:	fe 01       	movw	r30, r28
    23ee:	ff 96       	adiw	r30, 0x3f	; 63
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	2c f4       	brge	.+10     	; 0x2412 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9e af       	std	Y+62, r25	; 0x3e
    240e:	8d af       	std	Y+61, r24	; 0x3d
    2410:	46 c0       	rjmp	.+140    	; 0x249e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2412:	fe 01       	movw	r30, r28
    2414:	ff 96       	adiw	r30, 0x3f	; 63
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	64 f5       	brge	.+88     	; 0x2486 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	fe 01       	movw	r30, r28
    2430:	ed 5b       	subi	r30, 0xBD	; 189
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e af       	std	Y+62, r25	; 0x3e
    245a:	8d af       	std	Y+61, r24	; 0x3d
    245c:	0f c0       	rjmp	.+30     	; 0x247c <LCD_displayCharacter+0x478>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c af       	std	Y+60, r25	; 0x3c
    2464:	8b af       	std	Y+59, r24	; 0x3b
    2466:	8b ad       	ldd	r24, Y+59	; 0x3b
    2468:	9c ad       	ldd	r25, Y+60	; 0x3c
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <LCD_displayCharacter+0x466>
    246e:	9c af       	std	Y+60, r25	; 0x3c
    2470:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d ad       	ldd	r24, Y+61	; 0x3d
    2474:	9e ad       	ldd	r25, Y+62	; 0x3e
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e af       	std	Y+62, r25	; 0x3e
    247a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d ad       	ldd	r24, Y+61	; 0x3d
    247e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <LCD_displayCharacter+0x45a>
    2484:	16 c0       	rjmp	.+44     	; 0x24b2 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	fe 01       	movw	r30, r28
    2488:	ff 96       	adiw	r30, 0x3f	; 63
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9e af       	std	Y+62, r25	; 0x3e
    249c:	8d af       	std	Y+61, r24	; 0x3d
    249e:	8d ad       	ldd	r24, Y+61	; 0x3d
    24a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a2:	9a af       	std	Y+58, r25	; 0x3a
    24a4:	89 af       	std	Y+57, r24	; 0x39
    24a6:	89 ad       	ldd	r24, Y+57	; 0x39
    24a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <LCD_displayCharacter+0x4a6>
    24ae:	9a af       	std	Y+58, r25	; 0x3a
    24b0:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a0 e8       	ldi	r26, 0x80	; 128
    24c2:	bf e3       	ldi	r27, 0x3F	; 63
    24c4:	8d ab       	std	Y+53, r24	; 0x35
    24c6:	9e ab       	std	Y+54, r25	; 0x36
    24c8:	af ab       	std	Y+55, r26	; 0x37
    24ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24cc:	6d a9       	ldd	r22, Y+53	; 0x35
    24ce:	7e a9       	ldd	r23, Y+54	; 0x36
    24d0:	8f a9       	ldd	r24, Y+55	; 0x37
    24d2:	98 ad       	ldd	r25, Y+56	; 0x38
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	4a ef       	ldi	r20, 0xFA	; 250
    24da:	54 e4       	ldi	r21, 0x44	; 68
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	89 ab       	std	Y+49, r24	; 0x31
    24e6:	9a ab       	std	Y+50, r25	; 0x32
    24e8:	ab ab       	std	Y+51, r26	; 0x33
    24ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24ec:	69 a9       	ldd	r22, Y+49	; 0x31
    24ee:	7a a9       	ldd	r23, Y+50	; 0x32
    24f0:	8b a9       	ldd	r24, Y+51	; 0x33
    24f2:	9c a9       	ldd	r25, Y+52	; 0x34
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	2c f4       	brge	.+10     	; 0x250e <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	98 ab       	std	Y+48, r25	; 0x30
    250a:	8f a7       	std	Y+47, r24	; 0x2f
    250c:	3f c0       	rjmp	.+126    	; 0x258c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    250e:	69 a9       	ldd	r22, Y+49	; 0x31
    2510:	7a a9       	ldd	r23, Y+50	; 0x32
    2512:	8b a9       	ldd	r24, Y+51	; 0x33
    2514:	9c a9       	ldd	r25, Y+52	; 0x34
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	4c f5       	brge	.+82     	; 0x2578 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2526:	6d a9       	ldd	r22, Y+53	; 0x35
    2528:	7e a9       	ldd	r23, Y+54	; 0x36
    252a:	8f a9       	ldd	r24, Y+55	; 0x37
    252c:	98 ad       	ldd	r25, Y+56	; 0x38
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e2       	ldi	r20, 0x20	; 32
    2534:	51 e4       	ldi	r21, 0x41	; 65
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	98 ab       	std	Y+48, r25	; 0x30
    254c:	8f a7       	std	Y+47, r24	; 0x2f
    254e:	0f c0       	rjmp	.+30     	; 0x256e <LCD_displayCharacter+0x56a>
    2550:	88 ec       	ldi	r24, 0xC8	; 200
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e a7       	std	Y+46, r25	; 0x2e
    2556:	8d a7       	std	Y+45, r24	; 0x2d
    2558:	8d a5       	ldd	r24, Y+45	; 0x2d
    255a:	9e a5       	ldd	r25, Y+46	; 0x2e
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_displayCharacter+0x558>
    2560:	9e a7       	std	Y+46, r25	; 0x2e
    2562:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2564:	8f a5       	ldd	r24, Y+47	; 0x2f
    2566:	98 a9       	ldd	r25, Y+48	; 0x30
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	98 ab       	std	Y+48, r25	; 0x30
    256c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2570:	98 a9       	ldd	r25, Y+48	; 0x30
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	69 f7       	brne	.-38     	; 0x2550 <LCD_displayCharacter+0x54c>
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2578:	69 a9       	ldd	r22, Y+49	; 0x31
    257a:	7a a9       	ldd	r23, Y+50	; 0x32
    257c:	8b a9       	ldd	r24, Y+51	; 0x33
    257e:	9c a9       	ldd	r25, Y+52	; 0x34
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	98 ab       	std	Y+48, r25	; 0x30
    258a:	8f a7       	std	Y+47, r24	; 0x2f
    258c:	8f a5       	ldd	r24, Y+47	; 0x2f
    258e:	98 a9       	ldd	r25, Y+48	; 0x30
    2590:	9c a7       	std	Y+44, r25	; 0x2c
    2592:	8b a7       	std	Y+43, r24	; 0x2b
    2594:	8b a5       	ldd	r24, Y+43	; 0x2b
    2596:	9c a5       	ldd	r25, Y+44	; 0x2c
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	f1 f7       	brne	.-4      	; 0x2598 <LCD_displayCharacter+0x594>
    259c:	9c a7       	std	Y+44, r25	; 0x2c
    259e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	a0 e8       	ldi	r26, 0x80	; 128
    25b0:	bf e3       	ldi	r27, 0x3F	; 63
    25b2:	8f a3       	std	Y+39, r24	; 0x27
    25b4:	98 a7       	std	Y+40, r25	; 0x28
    25b6:	a9 a7       	std	Y+41, r26	; 0x29
    25b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ba:	6f a1       	ldd	r22, Y+39	; 0x27
    25bc:	78 a5       	ldd	r23, Y+40	; 0x28
    25be:	89 a5       	ldd	r24, Y+41	; 0x29
    25c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a ef       	ldi	r20, 0xFA	; 250
    25c8:	54 e4       	ldi	r21, 0x44	; 68
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	8b a3       	std	Y+35, r24	; 0x23
    25d4:	9c a3       	std	Y+36, r25	; 0x24
    25d6:	ad a3       	std	Y+37, r26	; 0x25
    25d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25da:	6b a1       	ldd	r22, Y+35	; 0x23
    25dc:	7c a1       	ldd	r23, Y+36	; 0x24
    25de:	8d a1       	ldd	r24, Y+37	; 0x25
    25e0:	9e a1       	ldd	r25, Y+38	; 0x26
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e8       	ldi	r20, 0x80	; 128
    25e8:	5f e3       	ldi	r21, 0x3F	; 63
    25ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ee:	88 23       	and	r24, r24
    25f0:	2c f4       	brge	.+10     	; 0x25fc <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9a a3       	std	Y+34, r25	; 0x22
    25f8:	89 a3       	std	Y+33, r24	; 0x21
    25fa:	3f c0       	rjmp	.+126    	; 0x267a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    25fc:	6b a1       	ldd	r22, Y+35	; 0x23
    25fe:	7c a1       	ldd	r23, Y+36	; 0x24
    2600:	8d a1       	ldd	r24, Y+37	; 0x25
    2602:	9e a1       	ldd	r25, Y+38	; 0x26
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	4c f5       	brge	.+82     	; 0x2666 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2614:	6f a1       	ldd	r22, Y+39	; 0x27
    2616:	78 a5       	ldd	r23, Y+40	; 0x28
    2618:	89 a5       	ldd	r24, Y+41	; 0x29
    261a:	9a a5       	ldd	r25, Y+42	; 0x2a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e2       	ldi	r20, 0x20	; 32
    2622:	51 e4       	ldi	r21, 0x41	; 65
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	bc 01       	movw	r22, r24
    262e:	cd 01       	movw	r24, r26
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9a a3       	std	Y+34, r25	; 0x22
    263a:	89 a3       	std	Y+33, r24	; 0x21
    263c:	0f c0       	rjmp	.+30     	; 0x265c <LCD_displayCharacter+0x658>
    263e:	88 ec       	ldi	r24, 0xC8	; 200
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	98 a3       	std	Y+32, r25	; 0x20
    2644:	8f 8f       	std	Y+31, r24	; 0x1f
    2646:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2648:	98 a1       	ldd	r25, Y+32	; 0x20
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_displayCharacter+0x646>
    264e:	98 a3       	std	Y+32, r25	; 0x20
    2650:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2652:	89 a1       	ldd	r24, Y+33	; 0x21
    2654:	9a a1       	ldd	r25, Y+34	; 0x22
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	9a a3       	std	Y+34, r25	; 0x22
    265a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265c:	89 a1       	ldd	r24, Y+33	; 0x21
    265e:	9a a1       	ldd	r25, Y+34	; 0x22
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	69 f7       	brne	.-38     	; 0x263e <LCD_displayCharacter+0x63a>
    2664:	14 c0       	rjmp	.+40     	; 0x268e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2666:	6b a1       	ldd	r22, Y+35	; 0x23
    2668:	7c a1       	ldd	r23, Y+36	; 0x24
    266a:	8d a1       	ldd	r24, Y+37	; 0x25
    266c:	9e a1       	ldd	r25, Y+38	; 0x26
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9a a3       	std	Y+34, r25	; 0x22
    2678:	89 a3       	std	Y+33, r24	; 0x21
    267a:	89 a1       	ldd	r24, Y+33	; 0x21
    267c:	9a a1       	ldd	r25, Y+34	; 0x22
    267e:	9e 8f       	std	Y+30, r25	; 0x1e
    2680:	8d 8f       	std	Y+29, r24	; 0x1d
    2682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2684:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_displayCharacter+0x682>
    268a:	9e 8f       	std	Y+30, r25	; 0x1e
    268c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    268e:	fe 01       	movw	r30, r28
    2690:	ed 59       	subi	r30, 0x9D	; 157
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	98 2f       	mov	r25, r24
    2698:	91 70       	andi	r25, 0x01	; 1
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	63 e0       	ldi	r22, 0x03	; 3
    269e:	49 2f       	mov	r20, r25
    26a0:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    26a4:	fe 01       	movw	r30, r28
    26a6:	ed 59       	subi	r30, 0x9D	; 157
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	82 70       	andi	r24, 0x02	; 2
    26b2:	90 70       	andi	r25, 0x00	; 0
    26b4:	95 95       	asr	r25
    26b6:	87 95       	ror	r24
    26b8:	98 2f       	mov	r25, r24
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	64 e0       	ldi	r22, 0x04	; 4
    26be:	49 2f       	mov	r20, r25
    26c0:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    26c4:	fe 01       	movw	r30, r28
    26c6:	ed 59       	subi	r30, 0x9D	; 157
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	84 70       	andi	r24, 0x04	; 4
    26d2:	90 70       	andi	r25, 0x00	; 0
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	95 95       	asr	r25
    26da:	87 95       	ror	r24
    26dc:	98 2f       	mov	r25, r24
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	65 e0       	ldi	r22, 0x05	; 5
    26e2:	49 2f       	mov	r20, r25
    26e4:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 59       	subi	r30, 0x9D	; 157
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	80 81       	ld	r24, Z
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	88 70       	andi	r24, 0x08	; 8
    26f6:	90 70       	andi	r25, 0x00	; 0
    26f8:	95 95       	asr	r25
    26fa:	87 95       	ror	r24
    26fc:	95 95       	asr	r25
    26fe:	87 95       	ror	r24
    2700:	95 95       	asr	r25
    2702:	87 95       	ror	r24
    2704:	98 2f       	mov	r25, r24
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	49 2f       	mov	r20, r25
    270c:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 e8       	ldi	r26, 0x80	; 128
    2716:	bf e3       	ldi	r27, 0x3F	; 63
    2718:	89 8f       	std	Y+25, r24	; 0x19
    271a:	9a 8f       	std	Y+26, r25	; 0x1a
    271c:	ab 8f       	std	Y+27, r26	; 0x1b
    271e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	69 8d       	ldd	r22, Y+25	; 0x19
    2722:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8d 8b       	std	Y+21, r24	; 0x15
    273a:	9e 8b       	std	Y+22, r25	; 0x16
    273c:	af 8b       	std	Y+23, r26	; 0x17
    273e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2740:	6d 89       	ldd	r22, Y+21	; 0x15
    2742:	7e 89       	ldd	r23, Y+22	; 0x16
    2744:	8f 89       	ldd	r24, Y+23	; 0x17
    2746:	98 8d       	ldd	r25, Y+24	; 0x18
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9c 8b       	std	Y+20, r25	; 0x14
    275e:	8b 8b       	std	Y+19, r24	; 0x13
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2762:	6d 89       	ldd	r22, Y+21	; 0x15
    2764:	7e 89       	ldd	r23, Y+22	; 0x16
    2766:	8f 89       	ldd	r24, Y+23	; 0x17
    2768:	98 8d       	ldd	r25, Y+24	; 0x18
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	69 8d       	ldd	r22, Y+25	; 0x19
    277c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9c 8b       	std	Y+20, r25	; 0x14
    27a0:	8b 8b       	std	Y+19, r24	; 0x13
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <LCD_displayCharacter+0x7be>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9a 8b       	std	Y+18, r25	; 0x12
    27aa:	89 8b       	std	Y+17, r24	; 0x11
    27ac:	89 89       	ldd	r24, Y+17	; 0x11
    27ae:	9a 89       	ldd	r25, Y+18	; 0x12
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_displayCharacter+0x7ac>
    27b4:	9a 8b       	std	Y+18, r25	; 0x12
    27b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ba:	9c 89       	ldd	r25, Y+20	; 0x14
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9c 8b       	std	Y+20, r25	; 0x14
    27c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <LCD_displayCharacter+0x7a0>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6d 89       	ldd	r22, Y+21	; 0x15
    27ce:	7e 89       	ldd	r23, Y+22	; 0x16
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
    27d2:	98 8d       	ldd	r25, Y+24	; 0x18
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9c 8b       	std	Y+20, r25	; 0x14
    27de:	8b 8b       	std	Y+19, r24	; 0x13
    27e0:	8b 89       	ldd	r24, Y+19	; 0x13
    27e2:	9c 89       	ldd	r25, Y+20	; 0x14
    27e4:	98 8b       	std	Y+16, r25	; 0x10
    27e6:	8f 87       	std	Y+15, r24	; 0x0f
    27e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ea:	98 89       	ldd	r25, Y+16	; 0x10
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <LCD_displayCharacter+0x7e8>
    27f0:	98 8b       	std	Y+16, r25	; 0x10
    27f2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	a0 e8       	ldi	r26, 0x80	; 128
    2804:	bf e3       	ldi	r27, 0x3F	; 63
    2806:	8b 87       	std	Y+11, r24	; 0x0b
    2808:	9c 87       	std	Y+12, r25	; 0x0c
    280a:	ad 87       	std	Y+13, r26	; 0x0d
    280c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2810:	7c 85       	ldd	r23, Y+12	; 0x0c
    2812:	8d 85       	ldd	r24, Y+13	; 0x0d
    2814:	9e 85       	ldd	r25, Y+14	; 0x0e
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a ef       	ldi	r20, 0xFA	; 250
    281c:	54 e4       	ldi	r21, 0x44	; 68
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	8f 83       	std	Y+7, r24	; 0x07
    2828:	98 87       	std	Y+8, r25	; 0x08
    282a:	a9 87       	std	Y+9, r26	; 0x09
    282c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282e:	6f 81       	ldd	r22, Y+7	; 0x07
    2830:	78 85       	ldd	r23, Y+8	; 0x08
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	40 e8       	ldi	r20, 0x80	; 128
    283c:	5f e3       	ldi	r21, 0x3F	; 63
    283e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2842:	88 23       	and	r24, r24
    2844:	2c f4       	brge	.+10     	; 0x2850 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	3f c0       	rjmp	.+126    	; 0x28ce <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2850:	6f 81       	ldd	r22, Y+7	; 0x07
    2852:	78 85       	ldd	r23, Y+8	; 0x08
    2854:	89 85       	ldd	r24, Y+9	; 0x09
    2856:	9a 85       	ldd	r25, Y+10	; 0x0a
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	3f ef       	ldi	r19, 0xFF	; 255
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	57 e4       	ldi	r21, 0x47	; 71
    2860:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	4c f5       	brge	.+82     	; 0x28ba <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e2       	ldi	r20, 0x20	; 32
    2876:	51 e4       	ldi	r21, 0x41	; 65
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	bc 01       	movw	r22, r24
    2882:	cd 01       	movw	r24, r26
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	0f c0       	rjmp	.+30     	; 0x28b0 <LCD_displayCharacter+0x8ac>
    2892:	88 ec       	ldi	r24, 0xC8	; 200
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9c 83       	std	Y+4, r25	; 0x04
    2898:	8b 83       	std	Y+3, r24	; 0x03
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <LCD_displayCharacter+0x89a>
    28a2:	9c 83       	std	Y+4, r25	; 0x04
    28a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a6:	8d 81       	ldd	r24, Y+5	; 0x05
    28a8:	9e 81       	ldd	r25, Y+6	; 0x06
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	69 f7       	brne	.-38     	; 0x2892 <LCD_displayCharacter+0x88e>
    28b8:	14 c0       	rjmp	.+40     	; 0x28e2 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ba:	6f 81       	ldd	r22, Y+7	; 0x07
    28bc:	78 85       	ldd	r23, Y+8	; 0x08
    28be:	89 85       	ldd	r24, Y+9	; 0x09
    28c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	9e 83       	std	Y+6, r25	; 0x06
    28cc:	8d 83       	std	Y+5, r24	; 0x05
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	9e 81       	ldd	r25, Y+6	; 0x06
    28d2:	9a 83       	std	Y+2, r25	; 0x02
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	9a 81       	ldd	r25, Y+2	; 0x02
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <LCD_displayCharacter+0x8d6>
    28de:	9a 83       	std	Y+2, r25	; 0x02
    28e0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    28e2:	cd 59       	subi	r28, 0x9D	; 157
    28e4:	df 4f       	sbci	r29, 0xFF	; 255
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	08 95       	ret

000028fa <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <LCD_displayString+0x6>
    2900:	0f 92       	push	r0
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	9b 83       	std	Y+3, r25	; 0x03
    2908:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    290a:	19 82       	std	Y+1, r1	; 0x01
    290c:	0e c0       	rjmp	.+28     	; 0x292a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	8a 81       	ldd	r24, Y+2	; 0x02
    2916:	9b 81       	ldd	r25, Y+3	; 0x03
    2918:	fc 01       	movw	r30, r24
    291a:	e2 0f       	add	r30, r18
    291c:	f3 1f       	adc	r31, r19
    291e:	80 81       	ld	r24, Z
    2920:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_displayCharacter>
		i++;
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	8f 5f       	subi	r24, 0xFF	; 255
    2928:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	28 2f       	mov	r18, r24
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	9b 81       	ldd	r25, Y+3	; 0x03
    2934:	fc 01       	movw	r30, r24
    2936:	e2 0f       	add	r30, r18
    2938:	f3 1f       	adc	r31, r19
    293a:	80 81       	ld	r24, Z
    293c:	88 23       	and	r24, r24
    293e:	39 f7       	brne	.-50     	; 0x290e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <LCD_moveCursor+0x6>
    2952:	00 d0       	rcall	.+0      	; 0x2954 <LCD_moveCursor+0x8>
    2954:	0f 92       	push	r0
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	8a 83       	std	Y+2, r24	; 0x02
    295c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	3d 83       	std	Y+5, r19	; 0x05
    2966:	2c 83       	std	Y+4, r18	; 0x04
    2968:	8c 81       	ldd	r24, Y+4	; 0x04
    296a:	9d 81       	ldd	r25, Y+5	; 0x05
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	91 05       	cpc	r25, r1
    2970:	c1 f0       	breq	.+48     	; 0x29a2 <LCD_moveCursor+0x56>
    2972:	2c 81       	ldd	r18, Y+4	; 0x04
    2974:	3d 81       	ldd	r19, Y+5	; 0x05
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	2c f4       	brge	.+10     	; 0x2986 <LCD_moveCursor+0x3a>
    297c:	8c 81       	ldd	r24, Y+4	; 0x04
    297e:	9d 81       	ldd	r25, Y+5	; 0x05
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	61 f0       	breq	.+24     	; 0x299c <LCD_moveCursor+0x50>
    2984:	19 c0       	rjmp	.+50     	; 0x29b8 <LCD_moveCursor+0x6c>
    2986:	2c 81       	ldd	r18, Y+4	; 0x04
    2988:	3d 81       	ldd	r19, Y+5	; 0x05
    298a:	22 30       	cpi	r18, 0x02	; 2
    298c:	31 05       	cpc	r19, r1
    298e:	69 f0       	breq	.+26     	; 0x29aa <LCD_moveCursor+0x5e>
    2990:	8c 81       	ldd	r24, Y+4	; 0x04
    2992:	9d 81       	ldd	r25, Y+5	; 0x05
    2994:	83 30       	cpi	r24, 0x03	; 3
    2996:	91 05       	cpc	r25, r1
    2998:	61 f0       	breq	.+24     	; 0x29b2 <LCD_moveCursor+0x66>
    299a:	0e c0       	rjmp	.+28     	; 0x29b8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	0b c0       	rjmp	.+22     	; 0x29b8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	80 5c       	subi	r24, 0xC0	; 192
    29a6:	89 83       	std	Y+1, r24	; 0x01
    29a8:	07 c0       	rjmp	.+14     	; 0x29b8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	80 5f       	subi	r24, 0xF0	; 240
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	03 c0       	rjmp	.+6      	; 0x29b8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	80 5b       	subi	r24, 0xB0	; 176
    29b6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	80 68       	ori	r24, 0x80	; 128
    29bc:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_sendCommand>
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    29d0:	df 93       	push	r29
    29d2:	cf 93       	push	r28
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <LCD_displayStringRowColumn+0x6>
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <LCD_displayStringRowColumn+0x8>
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	6a 83       	std	Y+2, r22	; 0x02
    29e0:	5c 83       	std	Y+4, r21	; 0x04
    29e2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	6a 81       	ldd	r22, Y+2	; 0x02
    29e8:	0e 94 a6 14 	call	0x294c	; 0x294c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_displayString>
}
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	62 97       	sbiw	r28, 0x12	; 18
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	9a 8b       	std	Y+18, r25	; 0x12
    2a18:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2a1a:	89 89       	ldd	r24, Y+17	; 0x11
    2a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a1e:	9e 01       	movw	r18, r28
    2a20:	2f 5f       	subi	r18, 0xFF	; 255
    2a22:	3f 4f       	sbci	r19, 0xFF	; 255
    2a24:	b9 01       	movw	r22, r18
    2a26:	4a e0       	ldi	r20, 0x0A	; 10
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	0e 94 3e 1c 	call	0x387c	; 0x387c <itoa>
   LCD_displayString(buff); /* Display the string */
    2a2e:	ce 01       	movw	r24, r28
    2a30:	01 96       	adiw	r24, 0x01	; 1
    2a32:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_displayString>
}
    2a36:	62 96       	adiw	r28, 0x12	; 18
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	0e 94 87 0b 	call	0x170e	; 0x170e <LCD_sendCommand>
}
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
    2a64:	60 97       	sbiw	r28, 0x10	; 16
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	40 e0       	ldi	r20, 0x00	; 0
    2a76:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2a84:	82 e0       	ldi	r24, 0x02	; 2
    2a86:	62 e0       	ldi	r22, 0x02	; 2
    2a88:	40 e0       	ldi	r20, 0x00	; 0
    2a8a:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2a8e:	82 e0       	ldi	r24, 0x02	; 2
    2a90:	63 e0       	ldi	r22, 0x03	; 3
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	64 e0       	ldi	r22, 0x04	; 4
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2aa2:	82 e0       	ldi	r24, 0x02	; 2
    2aa4:	65 e0       	ldi	r22, 0x05	; 5
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	66 e0       	ldi	r22, 0x06	; 6
    2ab0:	40 e0       	ldi	r20, 0x00	; 0
    2ab2:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	67 e0       	ldi	r22, 0x07	; 7
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2ac0:	1f 86       	std	Y+15, r1	; 0x0f
    2ac2:	ab c0       	rjmp	.+342    	; 0x2c1a <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2ac4:	82 e0       	ldi	r24, 0x02	; 2
    2ac6:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 82 08 	call	0x1104	; 0x1104 <GPIO_writePin>
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	a0 ea       	ldi	r26, 0xA0	; 160
    2ade:	b0 e4       	ldi	r27, 0x40	; 64
    2ae0:	8b 87       	std	Y+11, r24	; 0x0b
    2ae2:	9c 87       	std	Y+12, r25	; 0x0c
    2ae4:	ad 87       	std	Y+13, r26	; 0x0d
    2ae6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4a ef       	ldi	r20, 0xFA	; 250
    2af6:	54 e4       	ldi	r21, 0x44	; 68
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	8f 83       	std	Y+7, r24	; 0x07
    2b02:	98 87       	std	Y+8, r25	; 0x08
    2b04:	a9 87       	std	Y+9, r26	; 0x09
    2b06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b08:	6f 81       	ldd	r22, Y+7	; 0x07
    2b0a:	78 85       	ldd	r23, Y+8	; 0x08
    2b0c:	89 85       	ldd	r24, Y+9	; 0x09
    2b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e8       	ldi	r20, 0x80	; 128
    2b16:	5f e3       	ldi	r21, 0x3F	; 63
    2b18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b1c:	88 23       	and	r24, r24
    2b1e:	2c f4       	brge	.+10     	; 0x2b2a <KEYPAD_getPressedKey+0xce>
		__ticks = 1;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	3f c0       	rjmp	.+126    	; 0x2ba8 <KEYPAD_getPressedKey+0x14c>
	else if (__tmp > 65535)
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	78 85       	ldd	r23, Y+8	; 0x08
    2b2e:	89 85       	ldd	r24, Y+9	; 0x09
    2b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	3f ef       	ldi	r19, 0xFF	; 255
    2b36:	4f e7       	ldi	r20, 0x7F	; 127
    2b38:	57 e4       	ldi	r21, 0x47	; 71
    2b3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3e:	18 16       	cp	r1, r24
    2b40:	4c f5       	brge	.+82     	; 0x2b94 <KEYPAD_getPressedKey+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e2       	ldi	r20, 0x20	; 32
    2b50:	51 e4       	ldi	r21, 0x41	; 65
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	cd 01       	movw	r24, r26
    2b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9e 83       	std	Y+6, r25	; 0x06
    2b68:	8d 83       	std	Y+5, r24	; 0x05
    2b6a:	0f c0       	rjmp	.+30     	; 0x2b8a <KEYPAD_getPressedKey+0x12e>
    2b6c:	88 ec       	ldi	r24, 0xC8	; 200
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	9c 83       	std	Y+4, r25	; 0x04
    2b72:	8b 83       	std	Y+3, r24	; 0x03
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	9c 81       	ldd	r25, Y+4	; 0x04
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <KEYPAD_getPressedKey+0x11c>
    2b7c:	9c 83       	std	Y+4, r25	; 0x04
    2b7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	9e 81       	ldd	r25, Y+6	; 0x06
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	69 f7       	brne	.-38     	; 0x2b6c <KEYPAD_getPressedKey+0x110>
    2b92:	14 c0       	rjmp	.+40     	; 0x2bbc <KEYPAD_getPressedKey+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b94:	6f 81       	ldd	r22, Y+7	; 0x07
    2b96:	78 85       	ldd	r23, Y+8	; 0x08
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
    2ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    2baa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bac:	9a 83       	std	Y+2, r25	; 0x02
    2bae:	89 83       	std	Y+1, r24	; 0x01
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	f1 f7       	brne	.-4      	; 0x2bb4 <KEYPAD_getPressedKey+0x158>
    2bb8:	9a 83       	std	Y+2, r25	; 0x02
    2bba:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(5);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2bbc:	18 8a       	std	Y+16, r1	; 0x10
    2bbe:	22 c0       	rjmp	.+68     	; 0x2c04 <KEYPAD_getPressedKey+0x1a8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2bc0:	88 89       	ldd	r24, Y+16	; 0x10
    2bc2:	98 2f       	mov	r25, r24
    2bc4:	9c 5f       	subi	r25, 0xFC	; 252
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	69 2f       	mov	r22, r25
    2bca:	0e 94 6d 09 	call	0x12da	; 0x12da <GPIO_readPin>
    2bce:	88 23       	and	r24, r24
    2bd0:	b1 f4       	brne	.+44     	; 0x2bfe <KEYPAD_getPressedKey+0x1a2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	98 2f       	mov	r25, r24
    2be2:	88 89       	ldd	r24, Y+16	; 0x10
    2be4:	89 0f       	add	r24, r25
    2be6:	8f 5f       	subi	r24, 0xFF	; 255
    2be8:	0e 94 12 16 	call	0x2c24	; 0x2c24 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    2bec:	60 96       	adiw	r28, 0x10	; 16
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
			_delay_ms(5);
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2bfe:	88 89       	ldd	r24, Y+16	; 0x10
    2c00:	8f 5f       	subi	r24, 0xFF	; 255
    2c02:	88 8b       	std	Y+16, r24	; 0x10
    2c04:	88 89       	ldd	r24, Y+16	; 0x10
    2c06:	84 30       	cpi	r24, 0x04	; 4
    2c08:	d8 f2       	brcs	.-74     	; 0x2bc0 <KEYPAD_getPressedKey+0x164>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	0e 94 97 07 	call	0xf2e	; 0xf2e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2c14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c16:	8f 5f       	subi	r24, 0xFF	; 255
    2c18:	8f 87       	std	Y+15, r24	; 0x0f
    2c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c1c:	84 30       	cpi	r24, 0x04	; 4
    2c1e:	08 f4       	brcc	.+2      	; 0x2c22 <KEYPAD_getPressedKey+0x1c6>
    2c20:	51 cf       	rjmp	.-350    	; 0x2ac4 <KEYPAD_getPressedKey+0x68>
    2c22:	4e cf       	rjmp	.-356    	; 0x2ac0 <KEYPAD_getPressedKey+0x64>

00002c24 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	00 d0       	rcall	.+0      	; 0x2c2a <KEYPAD_4x4_adjustKeyNumber+0x6>
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <KEYPAD_4x4_adjustKeyNumber+0x8>
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2c32:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	3c 83       	std	Y+4, r19	; 0x04
    2c3c:	2b 83       	std	Y+3, r18	; 0x03
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	9c 81       	ldd	r25, Y+4	; 0x04
    2c42:	88 30       	cpi	r24, 0x08	; 8
    2c44:	91 05       	cpc	r25, r1
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2c48:	70 c0       	rjmp	.+224    	; 0x2d2a <KEYPAD_4x4_adjustKeyNumber+0x106>
    2c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c4e:	29 30       	cpi	r18, 0x09	; 9
    2c50:	31 05       	cpc	r19, r1
    2c52:	5c f5       	brge	.+86     	; 0x2caa <KEYPAD_4x4_adjustKeyNumber+0x86>
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	9c 81       	ldd	r25, Y+4	; 0x04
    2c58:	84 30       	cpi	r24, 0x04	; 4
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	09 f4       	brne	.+2      	; 0x2c60 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2c5e:	59 c0       	rjmp	.+178    	; 0x2d12 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2c60:	2b 81       	ldd	r18, Y+3	; 0x03
    2c62:	3c 81       	ldd	r19, Y+4	; 0x04
    2c64:	25 30       	cpi	r18, 0x05	; 5
    2c66:	31 05       	cpc	r19, r1
    2c68:	9c f4       	brge	.+38     	; 0x2c90 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	82 30       	cpi	r24, 0x02	; 2
    2c70:	91 05       	cpc	r25, r1
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2c74:	48 c0       	rjmp	.+144    	; 0x2d06 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2c76:	2b 81       	ldd	r18, Y+3	; 0x03
    2c78:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7a:	23 30       	cpi	r18, 0x03	; 3
    2c7c:	31 05       	cpc	r19, r1
    2c7e:	0c f0       	brlt	.+2      	; 0x2c82 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2c80:	45 c0       	rjmp	.+138    	; 0x2d0c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	9c 81       	ldd	r25, Y+4	; 0x04
    2c86:	81 30       	cpi	r24, 0x01	; 1
    2c88:	91 05       	cpc	r25, r1
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2c8c:	39 c0       	rjmp	.+114    	; 0x2d00 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2c8e:	68 c0       	rjmp	.+208    	; 0x2d60 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    2c90:	2b 81       	ldd	r18, Y+3	; 0x03
    2c92:	3c 81       	ldd	r19, Y+4	; 0x04
    2c94:	26 30       	cpi	r18, 0x06	; 6
    2c96:	31 05       	cpc	r19, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0x78>
    2c9a:	41 c0       	rjmp	.+130    	; 0x2d1e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca0:	87 30       	cpi	r24, 0x07	; 7
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	0c f0       	brlt	.+2      	; 0x2ca8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2ca6:	3e c0       	rjmp	.+124    	; 0x2d24 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2ca8:	37 c0       	rjmp	.+110    	; 0x2d18 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2caa:	2b 81       	ldd	r18, Y+3	; 0x03
    2cac:	3c 81       	ldd	r19, Y+4	; 0x04
    2cae:	2c 30       	cpi	r18, 0x0C	; 12
    2cb0:	31 05       	cpc	r19, r1
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2cb4:	46 c0       	rjmp	.+140    	; 0x2d42 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	8d 30       	cpi	r24, 0x0D	; 13
    2cbc:	91 05       	cpc	r25, r1
    2cbe:	5c f4       	brge	.+22     	; 0x2cd6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc4:	2a 30       	cpi	r18, 0x0A	; 10
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	b1 f1       	breq	.+108    	; 0x2d36 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	8b 30       	cpi	r24, 0x0B	; 11
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	a4 f5       	brge	.+104    	; 0x2d3c <KEYPAD_4x4_adjustKeyNumber+0x118>
    2cd4:	2d c0       	rjmp	.+90     	; 0x2d30 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cda:	2e 30       	cpi	r18, 0x0E	; 14
    2cdc:	31 05       	cpc	r19, r1
    2cde:	b9 f1       	breq	.+110    	; 0x2d4e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce4:	8e 30       	cpi	r24, 0x0E	; 14
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	7c f1       	brlt	.+94     	; 0x2d48 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2cea:	2b 81       	ldd	r18, Y+3	; 0x03
    2cec:	3c 81       	ldd	r19, Y+4	; 0x04
    2cee:	2f 30       	cpi	r18, 0x0F	; 15
    2cf0:	31 05       	cpc	r19, r1
    2cf2:	81 f1       	breq	.+96     	; 0x2d54 <KEYPAD_4x4_adjustKeyNumber+0x130>
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	80 31       	cpi	r24, 0x10	; 16
    2cfa:	91 05       	cpc	r25, r1
    2cfc:	71 f1       	breq	.+92     	; 0x2d5a <KEYPAD_4x4_adjustKeyNumber+0x136>
    2cfe:	30 c0       	rjmp	.+96     	; 0x2d60 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    2d00:	87 e3       	ldi	r24, 0x37	; 55
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	2f c0       	rjmp	.+94     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    2d06:	88 e3       	ldi	r24, 0x38	; 56
    2d08:	89 83       	std	Y+1, r24	; 0x01
    2d0a:	2c c0       	rjmp	.+88     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    2d0c:	89 e3       	ldi	r24, 0x39	; 57
    2d0e:	89 83       	std	Y+1, r24	; 0x01
    2d10:	29 c0       	rjmp	.+82     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2d12:	85 e2       	ldi	r24, 0x25	; 37
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	26 c0       	rjmp	.+76     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    2d18:	84 e3       	ldi	r24, 0x34	; 52
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	23 c0       	rjmp	.+70     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    2d1e:	85 e3       	ldi	r24, 0x35	; 53
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	20 c0       	rjmp	.+64     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    2d24:	86 e3       	ldi	r24, 0x36	; 54
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	1d c0       	rjmp	.+58     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2d2a:	8a e2       	ldi	r24, 0x2A	; 42
    2d2c:	89 83       	std	Y+1, r24	; 0x01
    2d2e:	1a c0       	rjmp	.+52     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    2d30:	81 e3       	ldi	r24, 0x31	; 49
    2d32:	89 83       	std	Y+1, r24	; 0x01
    2d34:	17 c0       	rjmp	.+46     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    2d36:	82 e3       	ldi	r24, 0x32	; 50
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	14 c0       	rjmp	.+40     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    2d3c:	83 e3       	ldi	r24, 0x33	; 51
    2d3e:	89 83       	std	Y+1, r24	; 0x01
    2d40:	11 c0       	rjmp	.+34     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2d42:	8d e2       	ldi	r24, 0x2D	; 45
    2d44:	89 83       	std	Y+1, r24	; 0x01
    2d46:	0e c0       	rjmp	.+28     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2d48:	8d e0       	ldi	r24, 0x0D	; 13
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	0b c0       	rjmp	.+22     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    2d4e:	80 e3       	ldi	r24, 0x30	; 48
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	08 c0       	rjmp	.+16     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2d54:	8d e3       	ldi	r24, 0x3D	; 61
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	05 c0       	rjmp	.+10     	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2d5a:	8b e2       	ldi	r24, 0x2B	; 43
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2d66:	0f 90       	pop	r0
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <APP_init>:
/*
 * Description :
 * This function is responsible for initializing the peripherals used
 */
void APP_init(void)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	2a 97       	sbiw	r28, 0x0a	; 10
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
	/* Crate a UART configuration variable with the required properties */
	UART_Config_t config = {UART_8_DATA_BITS, UART_PARITY_DISABLED,
			UART_1_STOP_BIT, 9600};
    2d88:	ce 01       	movw	r24, r28
    2d8a:	01 96       	adiw	r24, 0x01	; 1
    2d8c:	9f 83       	std	Y+7, r25	; 0x07
    2d8e:	8e 83       	std	Y+6, r24	; 0x06
    2d90:	e3 e6       	ldi	r30, 0x63	; 99
    2d92:	f1 e0       	ldi	r31, 0x01	; 1
    2d94:	f9 87       	std	Y+9, r31	; 0x09
    2d96:	e8 87       	std	Y+8, r30	; 0x08
    2d98:	f5 e0       	ldi	r31, 0x05	; 5
    2d9a:	fa 87       	std	Y+10, r31	; 0x0a
    2d9c:	e8 85       	ldd	r30, Y+8	; 0x08
    2d9e:	f9 85       	ldd	r31, Y+9	; 0x09
    2da0:	00 80       	ld	r0, Z
    2da2:	88 85       	ldd	r24, Y+8	; 0x08
    2da4:	99 85       	ldd	r25, Y+9	; 0x09
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	99 87       	std	Y+9, r25	; 0x09
    2daa:	88 87       	std	Y+8, r24	; 0x08
    2dac:	ee 81       	ldd	r30, Y+6	; 0x06
    2dae:	ff 81       	ldd	r31, Y+7	; 0x07
    2db0:	00 82       	st	Z, r0
    2db2:	8e 81       	ldd	r24, Y+6	; 0x06
    2db4:	9f 81       	ldd	r25, Y+7	; 0x07
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	9f 83       	std	Y+7, r25	; 0x07
    2dba:	8e 83       	std	Y+6, r24	; 0x06
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	91 50       	subi	r25, 0x01	; 1
    2dc0:	9a 87       	std	Y+10, r25	; 0x0a
    2dc2:	ea 85       	ldd	r30, Y+10	; 0x0a
    2dc4:	ee 23       	and	r30, r30
    2dc6:	51 f7       	brne	.-44     	; 0x2d9c <APP_init+0x28>

	/* Enable Global Interrupt */
	SREG |= (1<<7);
    2dc8:	af e5       	ldi	r26, 0x5F	; 95
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	ef e5       	ldi	r30, 0x5F	; 95
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	80 68       	ori	r24, 0x80	; 128
    2dd4:	8c 93       	st	X, r24

	/* initialize LCD, UART modules */
	LCD_init();
    2dd6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_init>
	UART_init(&config);
    2dda:	ce 01       	movw	r24, r28
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	/* set password at startup */
	setPass();
    2de2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <setPass>

}
    2de6:	2a 96       	adiw	r28, 0x0a	; 10
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <APP_start>:
/*
 * Description :
 * This function is responsible for operating the system as requried
 */
void APP_start(void)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <APP_start+0x6>
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
	uint8 isCorrect;		/* used to check if entered password matches system password */
	uint8 input = '\0'; 	/* used to get the user required action */
    2e02:	19 82       	std	Y+1, r1	; 0x01


	/* Display main system options */
	LCD_clearScreen();
    2e04:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, " + : Open Door");
    2e08:	20 e6       	ldi	r18, 0x60	; 96
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	a9 01       	movw	r20, r18
    2e12:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, " - : Change Pass");
    2e16:	2f e6       	ldi	r18, 0x6F	; 111
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	a9 01       	movw	r20, r18
    2e20:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>

	/* get user required action, keep prompting till a valid input is entered */
	do
	{
		input = KEYPAD_getPressedKey();
    2e24:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <KEYPAD_getPressedKey>
    2e28:	89 83       	std	Y+1, r24	; 0x01
	}while(input != '+' && input != '-');
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	8b 32       	cpi	r24, 0x2B	; 43
    2e2e:	19 f0       	breq	.+6      	; 0x2e36 <APP_start+0x3e>
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	8d 32       	cpi	r24, 0x2D	; 45
    2e34:	b9 f7       	brne	.-18     	; 0x2e24 <APP_start+0x2c>

	/* ask user for system password with 3 trials allowance */
	isCorrect = checkPassword_trials();
    2e36:	0e 94 4b 18 	call	0x3096	; 0x3096 <checkPassword_trials>
    2e3a:	8a 83       	std	Y+2, r24	; 0x02
	if(!isCorrect)
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	88 23       	and	r24, r24
    2e40:	19 f4       	brne	.+6      	; 0x2e48 <APP_start+0x50>
	{
		/* all the 3 trials are used, lock the system */
		lockSystem();
    2e42:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <lockSystem>
    2e46:	08 c0       	rjmp	.+16     	; 0x2e58 <APP_start+0x60>
		/* go to step 2 "main menu options"*/
		return;
	}

	/* Execute the required action */
	if('+' == input)
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	8b 32       	cpi	r24, 0x2B	; 43
    2e4c:	19 f4       	brne	.+6      	; 0x2e54 <APP_start+0x5c>
	{
		openDoor();
    2e4e:	0e 94 89 18 	call	0x3112	; 0x3112 <openDoor>
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <APP_start+0x60>
	}
	else
	{
		/* change the password */
		setPass();
    2e54:	0e 94 31 17 	call	0x2e62	; 0x2e62 <setPass>
	}
}
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <setPass>:
/*
 * Description :
 * 		This function is responsible for setting and updating the password of the system
 */
void setPass(void)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	cd b7       	in	r28, 0x3d	; 61
    2e68:	de b7       	in	r29, 0x3e	; 62
    2e6a:	a5 97       	sbiw	r28, 0x25	; 37
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[10] = ""; /* to store the first password */
    2e76:	18 8a       	std	Y+16, r1	; 0x10
    2e78:	19 8a       	std	Y+17, r1	; 0x11
    2e7a:	1a 8a       	std	Y+18, r1	; 0x12
    2e7c:	1b 8a       	std	Y+19, r1	; 0x13
    2e7e:	86 e0       	ldi	r24, 0x06	; 6
    2e80:	fe 01       	movw	r30, r28
    2e82:	74 96       	adiw	r30, 0x14	; 20
    2e84:	df 01       	movw	r26, r30
    2e86:	98 2f       	mov	r25, r24
    2e88:	1d 92       	st	X+, r1
    2e8a:	9a 95       	dec	r25
    2e8c:	e9 f7       	brne	.-6      	; 0x2e88 <setPass+0x26>
	uint8 pass2[10] = ""; /* to store the confirmation password */
    2e8e:	1a 8e       	std	Y+26, r1	; 0x1a
    2e90:	1b 8e       	std	Y+27, r1	; 0x1b
    2e92:	1c 8e       	std	Y+28, r1	; 0x1c
    2e94:	1d 8e       	std	Y+29, r1	; 0x1d
    2e96:	86 e0       	ldi	r24, 0x06	; 6
    2e98:	fe 01       	movw	r30, r28
    2e9a:	7e 96       	adiw	r30, 0x1e	; 30
    2e9c:	df 01       	movw	r26, r30
    2e9e:	98 2f       	mov	r25, r24
    2ea0:	1d 92       	st	X+, r1
    2ea2:	9a 95       	dec	r25
    2ea4:	e9 f7       	brne	.-6      	; 0x2ea0 <setPass+0x3e>
	uint8 pass1_size = 0; /* indicates pass1 length */
    2ea6:	1c a2       	std	Y+36, r1	; 0x24
	uint8 pass2_size = 0; /* indicates pass2 length */
    2ea8:	1d a2       	std	Y+37, r1	; 0x25

	uint8 matched = 0;	  /* flag that is set when pass1 && pass2 are identical */
    2eaa:	1f 86       	std	Y+15, r1	; 0x0f

	do
	{
		/* prompt user for password */
		LCD_clearScreen();
    2eac:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz enter pass: ");
    2eb0:	20 e8       	ldi	r18, 0x80	; 128
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	a9 01       	movw	r20, r18
    2eba:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	0e 94 a6 14 	call	0x294c	; 0x294c <LCD_moveCursor>

		/* get the password for the first time */
		getPass(pass1, &pass1_size);
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	40 96       	adiw	r24, 0x10	; 16
    2eca:	9e 01       	movw	r18, r28
    2ecc:	2c 5d       	subi	r18, 0xDC	; 220
    2ece:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed0:	b9 01       	movw	r22, r18
    2ed2:	0e 94 c3 19 	call	0x3386	; 0x3386 <getPass>

		/* prompt user to confirm the password */
		LCD_displayStringRowColumn(0, 0, "Plz re-enter the");
    2ed6:	21 e9       	ldi	r18, 0x91	; 145
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	a9 01       	movw	r20, r18
    2ee0:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "same pass: ");
    2ee4:	22 ea       	ldi	r18, 0xA2	; 162
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	a9 01       	movw	r20, r18
    2eee:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>

		/* get the password for the second time */
		getPass(pass2, &pass2_size);
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	4a 96       	adiw	r24, 0x1a	; 26
    2ef6:	9e 01       	movw	r18, r28
    2ef8:	2b 5d       	subi	r18, 0xDB	; 219
    2efa:	3f 4f       	sbci	r19, 0xFF	; 255
    2efc:	b9 01       	movw	r22, r18
    2efe:	0e 94 c3 19 	call	0x3386	; 0x3386 <getPass>

		/* Check if the two passwords match*/
		if(pass1_size != pass2_size)
    2f02:	9c a1       	ldd	r25, Y+36	; 0x24
    2f04:	8d a1       	ldd	r24, Y+37	; 0x25
    2f06:	98 17       	cp	r25, r24
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <setPass+0xaa>
    2f0a:	83 c0       	rjmp	.+262    	; 0x3012 <setPass+0x1b0>
		{
			/* if the two passwords are of different sizes, they are already mismatched */
			LCD_clearScreen();
    2f0c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Error!! ");
    2f10:	2e ea       	ldi	r18, 0xAE	; 174
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	60 e0       	ldi	r22, 0x00	; 0
    2f18:	a9 01       	movw	r20, r18
    2f1a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "NOT MATCHED");
    2f1e:	27 eb       	ldi	r18, 0xB7	; 183
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	60 e0       	ldi	r22, 0x00	; 0
    2f26:	a9 01       	movw	r20, r18
    2f28:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	aa e7       	ldi	r26, 0x7A	; 122
    2f32:	b4 e4       	ldi	r27, 0x44	; 68
    2f34:	8b 87       	std	Y+11, r24	; 0x0b
    2f36:	9c 87       	std	Y+12, r25	; 0x0c
    2f38:	ad 87       	std	Y+13, r26	; 0x0d
    2f3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4a ef       	ldi	r20, 0xFA	; 250
    2f4a:	54 e4       	ldi	r21, 0x44	; 68
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	8f 83       	std	Y+7, r24	; 0x07
    2f56:	98 87       	std	Y+8, r25	; 0x08
    2f58:	a9 87       	std	Y+9, r26	; 0x09
    2f5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e8       	ldi	r20, 0x80	; 128
    2f6a:	5f e3       	ldi	r21, 0x3F	; 63
    2f6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f70:	88 23       	and	r24, r24
    2f72:	2c f4       	brge	.+10     	; 0x2f7e <setPass+0x11c>
		__ticks = 1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	9e 83       	std	Y+6, r25	; 0x06
    2f7a:	8d 83       	std	Y+5, r24	; 0x05
    2f7c:	3f c0       	rjmp	.+126    	; 0x2ffc <setPass+0x19a>
	else if (__tmp > 65535)
    2f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f80:	78 85       	ldd	r23, Y+8	; 0x08
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	3f ef       	ldi	r19, 0xFF	; 255
    2f8a:	4f e7       	ldi	r20, 0x7F	; 127
    2f8c:	57 e4       	ldi	r21, 0x47	; 71
    2f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	4c f5       	brge	.+82     	; 0x2fe8 <setPass+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9e 83       	std	Y+6, r25	; 0x06
    2fbc:	8d 83       	std	Y+5, r24	; 0x05
    2fbe:	0f c0       	rjmp	.+30     	; 0x2fde <setPass+0x17c>
    2fc0:	88 ec       	ldi	r24, 0xC8	; 200
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	9c 83       	std	Y+4, r25	; 0x04
    2fc6:	8b 83       	std	Y+3, r24	; 0x03
    2fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fca:	9c 81       	ldd	r25, Y+4	; 0x04
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <setPass+0x16a>
    2fd0:	9c 83       	std	Y+4, r25	; 0x04
    2fd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	69 f7       	brne	.-38     	; 0x2fc0 <setPass+0x15e>
    2fe6:	4a c0       	rjmp	.+148    	; 0x307c <setPass+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    2fea:	78 85       	ldd	r23, Y+8	; 0x08
    2fec:	89 85       	ldd	r24, Y+9	; 0x09
    2fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	9e 83       	std	Y+6, r25	; 0x06
    2ffa:	8d 83       	std	Y+5, r24	; 0x05
    2ffc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	9a 81       	ldd	r25, Y+2	; 0x02
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <setPass+0x1a6>
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	35 c0       	rjmp	.+106    	; 0x307c <setPass+0x21a>
			continue;
		}
		else
		{
			/* if the 2 passwords are the same size, check if they match */
			matched = isPassMatched(pass1, pass2, pass1_size);
    3012:	4c a1       	ldd	r20, Y+36	; 0x24
    3014:	ce 01       	movw	r24, r28
    3016:	40 96       	adiw	r24, 0x10	; 16
    3018:	9e 01       	movw	r18, r28
    301a:	26 5e       	subi	r18, 0xE6	; 230
    301c:	3f 4f       	sbci	r19, 0xFF	; 255
    301e:	b9 01       	movw	r22, r18
    3020:	0e 94 10 1b 	call	0x3620	; 0x3620 <isPassMatched>
    3024:	8f 87       	std	Y+15, r24	; 0x0f

			LCD_clearScreen();
    3026:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>

			if(matched)
    302a:	8f 85       	ldd	r24, Y+15	; 0x0f
    302c:	88 23       	and	r24, r24
    302e:	b1 f0       	breq	.+44     	; 0x305c <setPass+0x1fa>
			{
				/* if matched, send the password to the Control_ECU to be stored in EEPROM */
				LCD_displayStringRowColumn(0, 0, "Pass set");
    3030:	23 ec       	ldi	r18, 0xC3	; 195
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	a9 01       	movw	r20, r18
    303a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "Successfully");
    303e:	2c ec       	ldi	r18, 0xCC	; 204
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	60 e0       	ldi	r22, 0x00	; 0
    3046:	a9 01       	movw	r20, r18
    3048:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>

				UART_sendByte('0');
    304c:	80 e3       	ldi	r24, 0x30	; 48
    304e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <UART_sendByte>
				UART_sendString(pass1);
    3052:	ce 01       	movw	r24, r28
    3054:	40 96       	adiw	r24, 0x10	; 16
    3056:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendString>
    305a:	0e c0       	rjmp	.+28     	; 0x3078 <setPass+0x216>

			}
			else
			{
				/* if not matched, print error messages and prompt from the beginning */
				LCD_displayStringRowColumn(0, 0, "Error!! ");
    305c:	2e ea       	ldi	r18, 0xAE	; 174
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	a9 01       	movw	r20, r18
    3066:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 0, "NOT MATCHED");
    306a:	27 eb       	ldi	r18, 0xB7	; 183
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	a9 01       	movw	r20, r18
    3074:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
			}
			TIMER1_delay_1sec();
    3078:	0e 94 8d 1b 	call	0x371a	; 0x371a <TIMER1_delay_1sec>
		}
	}while(!matched); /* keep prompting for a correct password to be set */
    307c:	8f 85       	ldd	r24, Y+15	; 0x0f
    307e:	88 23       	and	r24, r24
    3080:	09 f4       	brne	.+2      	; 0x3084 <setPass+0x222>
    3082:	14 cf       	rjmp	.-472    	; 0x2eac <setPass+0x4a>
}
    3084:	a5 96       	adiw	r28, 0x25	; 37
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	cf 91       	pop	r28
    3092:	df 91       	pop	r29
    3094:	08 95       	ret

00003096 <checkPassword_trials>:
 * Return:
 * 			1 Password is correct.
 * 		   	0 All trials are used without password being correct
 */
uint8 checkPassword_trials(void)
{
    3096:	df 93       	push	r29
    3098:	cf 93       	push	r28
    309a:	00 d0       	rcall	.+0      	; 0x309c <checkPassword_trials+0x6>
    309c:	00 d0       	rcall	.+0      	; 0x309e <checkPassword_trials+0x8>
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	uint8 maxTrials = 3;
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	8a 83       	std	Y+2, r24	; 0x02
    30a6:	1f c0       	rjmp	.+62     	; 0x30e6 <checkPassword_trials+0x50>
	{

		/* prompt user to enter the system password to execute the required action,
		 * then check if password is correct
		 */
		isCorrect = verifyPass_ControlECU();
    30a8:	0e 94 10 19 	call	0x3220	; 0x3220 <verifyPass_ControlECU>
    30ac:	89 83       	std	Y+1, r24	; 0x01

		if ('1' == isCorrect)
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	81 33       	cpi	r24, 0x31	; 49
    30b2:	71 f4       	brne	.+28     	; 0x30d0 <checkPassword_trials+0x3a>
		{
			/* password is correct */
			LCD_clearScreen();
    30b4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "ACCESS GRANTED");
    30b8:	29 ed       	ldi	r18, 0xD9	; 217
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	a9 01       	movw	r20, r18
    30c2:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
			TIMER1_delay_1sec();
    30c6:	0e 94 8d 1b 	call	0x371a	; 0x371a <TIMER1_delay_1sec>
			return 1;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	8b 83       	std	Y+3, r24	; 0x03
    30ce:	19 c0       	rjmp	.+50     	; 0x3102 <checkPassword_trials+0x6c>
		}
		else{
		/* if password is false */
		LCD_clearScreen();
    30d0:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "ACCESS DENIED");
    30d4:	28 ee       	ldi	r18, 0xE8	; 232
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	60 e0       	ldi	r22, 0x00	; 0
    30dc:	a9 01       	movw	r20, r18
    30de:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
		TIMER1_delay_1sec();
    30e2:	0e 94 8d 1b 	call	0x371a	; 0x371a <TIMER1_delay_1sec>
uint8 checkPassword_trials(void)
{
	uint8 maxTrials = 3;
	uint8 isCorrect;

	while(maxTrials--)
    30e6:	8a 81       	ldd	r24, Y+2	; 0x02
    30e8:	8c 83       	std	Y+4, r24	; 0x04
    30ea:	8c 81       	ldd	r24, Y+4	; 0x04
    30ec:	88 23       	and	r24, r24
    30ee:	11 f0       	breq	.+4      	; 0x30f4 <checkPassword_trials+0x5e>
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	8c 83       	std	Y+4, r24	; 0x04
    30f4:	8c 81       	ldd	r24, Y+4	; 0x04
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	91 50       	subi	r25, 0x01	; 1
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	88 23       	and	r24, r24
    30fe:	a1 f6       	brne	.-88     	; 0x30a8 <checkPassword_trials+0x12>
		LCD_displayStringRowColumn(0, 0, "ACCESS DENIED");
		TIMER1_delay_1sec();
		}
	}
	/* all 3 trials are used without password being correct */
	return 0;
    3100:	1b 82       	std	Y+3, r1	; 0x03
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	0f 90       	pop	r0
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <openDoor>:
/*
 * Description :
 * 			This function is responsible for executing the steps required to open the door
 */
void openDoor(void)
{
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	00 d0       	rcall	.+0      	; 0x3118 <openDoor+0x6>
    3118:	0f 92       	push	r0
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
	int count_down = 3;
    311e:	83 e0       	ldi	r24, 0x03	; 3
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	89 83       	std	Y+1, r24	; 0x01
	/* Send a command to control_ECU to open the door */
	UART_sendByte('2');
    3126:	82 e3       	ldi	r24, 0x32	; 50
    3128:	0e 94 0d 06 	call	0xc1a	; 0xc1a <UART_sendByte>
	/* display opening message for 15 seconds */
	LCD_clearScreen();
    312c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is Unlocking");
    3130:	26 ef       	ldi	r18, 0xF6	; 246
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	60 e0       	ldi	r22, 0x00	; 0
    3138:	a9 01       	movw	r20, r18
    313a:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
	TIMER1_delay_15sec();
    313e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <TIMER1_delay_15sec>

	/* display time remaining to lock the door */
	LCD_clearScreen();
    3142:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door locks in");
    3146:	28 e0       	ldi	r18, 0x08	; 8
    3148:	31 e0       	ldi	r19, 0x01	; 1
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	60 e0       	ldi	r22, 0x00	; 0
    314e:	a9 01       	movw	r20, r18
    3150:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 8, "3");
    3154:	26 e1       	ldi	r18, 0x16	; 22
    3156:	31 e0       	ldi	r19, 0x01	; 1
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	68 e0       	ldi	r22, 0x08	; 8
    315c:	a9 01       	movw	r20, r18
    315e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
    3162:	0a c0       	rjmp	.+20     	; 0x3178 <openDoor+0x66>

	while(count_down--)
	{
		/* update count_down variable every 1 second */
		TIMER1_delay_1sec();
    3164:	0e 94 8d 1b 	call	0x371a	; 0x371a <TIMER1_delay_1sec>
		LCD_moveCursor(1, 8);
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	68 e0       	ldi	r22, 0x08	; 8
    316c:	0e 94 a6 14 	call	0x294c	; 0x294c <LCD_moveCursor>
		LCD_intgerToString(count_down);
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_intgerToString>
	/* display time remaining to lock the door */
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Door locks in");
	LCD_displayStringRowColumn(1, 8, "3");

	while(count_down--)
    3178:	1b 82       	std	Y+3, r1	; 0x03
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	11 f0       	breq	.+4      	; 0x3186 <openDoor+0x74>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	8b 83       	std	Y+3, r24	; 0x03
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	9a 83       	std	Y+2, r25	; 0x02
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	88 23       	and	r24, r24
    3194:	39 f7       	brne	.-50     	; 0x3164 <openDoor+0x52>
		LCD_moveCursor(1, 8);
		LCD_intgerToString(count_down);
	}

	/* display locking the door warning */
	LCD_clearScreen();
    3196:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is locking  ");
    319a:	28 e1       	ldi	r18, 0x18	; 24
    319c:	31 e0       	ldi	r19, 0x01	; 1
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	60 e0       	ldi	r22, 0x00	; 0
    31a2:	a9 01       	movw	r20, r18
    31a4:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
	TIMER1_delay_15sec();
    31a8:	0e 94 4a 1b 	call	0x3694	; 0x3694 <TIMER1_delay_15sec>
}
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <lockSystem>:
/*
 * Description :
 * 			This function is responsible for locking the systems when all password trials are used
 */
void lockSystem(void)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <lockSystem+0x6>
    31be:	0f 92       	push	r0
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
	int timer_counter = 0; /* used to repeat the 15sec delay function to get 1 min*/
    31c4:	1a 82       	std	Y+2, r1	; 0x02
    31c6:	19 82       	std	Y+1, r1	; 0x01
	/* activate buzzer for 1 minute "send relative signal to control_mcu" */
	UART_sendByte('3');
    31c8:	83 e3       	ldi	r24, 0x33	; 51
    31ca:	0e 94 0d 06 	call	0xc1a	; 0xc1a <UART_sendByte>

	/* display error message on lcd for 1 minute */
	LCD_clearScreen();
    31ce:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "MAX TRIALS USED");
    31d2:	2a e2       	ldi	r18, 0x2A	; 42
    31d4:	31 e0       	ldi	r19, 0x01	; 1
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	60 e0       	ldi	r22, 0x00	; 0
    31da:	a9 01       	movw	r20, r18
    31dc:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "SYSTEM IS LOCKED");
    31e0:	2a e3       	ldi	r18, 0x3A	; 58
    31e2:	31 e0       	ldi	r19, 0x01	; 1
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	a9 01       	movw	r20, r18
    31ea:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <lockSystem+0x3c>
	/* no input received */

	/* Delay 1 minute */
	while(timer_counter++ < 4)
	{
		TIMER1_delay_15sec();
    31f0:	0e 94 4a 1b 	call	0x3694	; 0x3694 <TIMER1_delay_15sec>
	LCD_displayStringRowColumn(0, 0, "MAX TRIALS USED");
	LCD_displayStringRowColumn(1, 0, "SYSTEM IS LOCKED");
	/* no input received */

	/* Delay 1 minute */
	while(timer_counter++ < 4)
    31f4:	1b 82       	std	Y+3, r1	; 0x03
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	9a 81       	ldd	r25, Y+2	; 0x02
    31fa:	84 30       	cpi	r24, 0x04	; 4
    31fc:	91 05       	cpc	r25, r1
    31fe:	14 f4       	brge	.+4      	; 0x3204 <lockSystem+0x4c>
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	8b 83       	std	Y+3, r24	; 0x03
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	01 96       	adiw	r24, 0x01	; 1
    320a:	9a 83       	std	Y+2, r25	; 0x02
    320c:	89 83       	std	Y+1, r24	; 0x01
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	88 23       	and	r24, r24
    3212:	71 f7       	brne	.-36     	; 0x31f0 <lockSystem+0x38>
	{
		TIMER1_delay_15sec();
	}
}
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <verifyPass_ControlECU>:
 * Return:
 * 			'1' Password is correct.
 * 		   	'0' Password is false.
 */
char verifyPass_ControlECU(void)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	6a 97       	sbiw	r28, 0x1a	; 26
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
	uint8 response = 0;		/* flag that is set if entered password matches the system password */
    3234:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 pass[10] = "";	/* to store the user entered password */
    3236:	18 8a       	std	Y+16, r1	; 0x10
    3238:	19 8a       	std	Y+17, r1	; 0x11
    323a:	1a 8a       	std	Y+18, r1	; 0x12
    323c:	1b 8a       	std	Y+19, r1	; 0x13
    323e:	86 e0       	ldi	r24, 0x06	; 6
    3240:	fe 01       	movw	r30, r28
    3242:	74 96       	adiw	r30, 0x14	; 20
    3244:	df 01       	movw	r26, r30
    3246:	98 2f       	mov	r25, r24
    3248:	1d 92       	st	X+, r1
    324a:	9a 95       	dec	r25
    324c:	e9 f7       	brne	.-6      	; 0x3248 <verifyPass_ControlECU+0x28>
	uint8 pass_size = 0;	/* to indicate the user entered password size */
    324e:	1a 8e       	std	Y+26, r1	; 0x1a

	/* prompt for password */
	LCD_clearScreen();
    3250:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Plz enter pass:");
    3254:	2b e4       	ldi	r18, 0x4B	; 75
    3256:	31 e0       	ldi	r19, 0x01	; 1
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	a9 01       	movw	r20, r18
    325e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	60 e0       	ldi	r22, 0x00	; 0
    3266:	0e 94 a6 14 	call	0x294c	; 0x294c <LCD_moveCursor>

	/* get user entered password */
	getPass(pass, &pass_size);
    326a:	ce 01       	movw	r24, r28
    326c:	40 96       	adiw	r24, 0x10	; 16
    326e:	9e 01       	movw	r18, r28
    3270:	26 5e       	subi	r18, 0xE6	; 230
    3272:	3f 4f       	sbci	r19, 0xFF	; 255
    3274:	b9 01       	movw	r22, r18
    3276:	0e 94 c3 19 	call	0x3386	; 0x3386 <getPass>

	/* send the password to the Control_ECU to be check with system password */
	UART_sendByte('1');
    327a:	81 e3       	ldi	r24, 0x31	; 49
    327c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <UART_sendByte>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	a0 e2       	ldi	r26, 0x20	; 32
    3286:	b1 e4       	ldi	r27, 0x41	; 65
    3288:	8b 87       	std	Y+11, r24	; 0x0b
    328a:	9c 87       	std	Y+12, r25	; 0x0c
    328c:	ad 87       	std	Y+13, r26	; 0x0d
    328e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3290:	6b 85       	ldd	r22, Y+11	; 0x0b
    3292:	7c 85       	ldd	r23, Y+12	; 0x0c
    3294:	8d 85       	ldd	r24, Y+13	; 0x0d
    3296:	9e 85       	ldd	r25, Y+14	; 0x0e
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	4a ef       	ldi	r20, 0xFA	; 250
    329e:	54 e4       	ldi	r21, 0x44	; 68
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	8f 83       	std	Y+7, r24	; 0x07
    32aa:	98 87       	std	Y+8, r25	; 0x08
    32ac:	a9 87       	std	Y+9, r26	; 0x09
    32ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b0:	6f 81       	ldd	r22, Y+7	; 0x07
    32b2:	78 85       	ldd	r23, Y+8	; 0x08
    32b4:	89 85       	ldd	r24, Y+9	; 0x09
    32b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e8       	ldi	r20, 0x80	; 128
    32be:	5f e3       	ldi	r21, 0x3F	; 63
    32c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32c4:	88 23       	and	r24, r24
    32c6:	2c f4       	brge	.+10     	; 0x32d2 <verifyPass_ControlECU+0xb2>
		__ticks = 1;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	9e 83       	std	Y+6, r25	; 0x06
    32ce:	8d 83       	std	Y+5, r24	; 0x05
    32d0:	3f c0       	rjmp	.+126    	; 0x3350 <verifyPass_ControlECU+0x130>
	else if (__tmp > 65535)
    32d2:	6f 81       	ldd	r22, Y+7	; 0x07
    32d4:	78 85       	ldd	r23, Y+8	; 0x08
    32d6:	89 85       	ldd	r24, Y+9	; 0x09
    32d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	3f ef       	ldi	r19, 0xFF	; 255
    32de:	4f e7       	ldi	r20, 0x7F	; 127
    32e0:	57 e4       	ldi	r21, 0x47	; 71
    32e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32e6:	18 16       	cp	r1, r24
    32e8:	4c f5       	brge	.+82     	; 0x333c <verifyPass_ControlECU+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	40 e2       	ldi	r20, 0x20	; 32
    32f8:	51 e4       	ldi	r21, 0x41	; 65
    32fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	9e 83       	std	Y+6, r25	; 0x06
    3310:	8d 83       	std	Y+5, r24	; 0x05
    3312:	0f c0       	rjmp	.+30     	; 0x3332 <verifyPass_ControlECU+0x112>
    3314:	88 ec       	ldi	r24, 0xC8	; 200
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	9c 83       	std	Y+4, r25	; 0x04
    331a:	8b 83       	std	Y+3, r24	; 0x03
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <verifyPass_ControlECU+0x100>
    3324:	9c 83       	std	Y+4, r25	; 0x04
    3326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3328:	8d 81       	ldd	r24, Y+5	; 0x05
    332a:	9e 81       	ldd	r25, Y+6	; 0x06
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	9e 83       	std	Y+6, r25	; 0x06
    3330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	69 f7       	brne	.-38     	; 0x3314 <verifyPass_ControlECU+0xf4>
    333a:	14 c0       	rjmp	.+40     	; 0x3364 <verifyPass_ControlECU+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    333c:	6f 81       	ldd	r22, Y+7	; 0x07
    333e:	78 85       	ldd	r23, Y+8	; 0x08
    3340:	89 85       	ldd	r24, Y+9	; 0x09
    3342:	9a 85       	ldd	r25, Y+10	; 0x0a
    3344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	9e 83       	std	Y+6, r25	; 0x06
    334e:	8d 83       	std	Y+5, r24	; 0x05
    3350:	8d 81       	ldd	r24, Y+5	; 0x05
    3352:	9e 81       	ldd	r25, Y+6	; 0x06
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	9a 81       	ldd	r25, Y+2	; 0x02
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <verifyPass_ControlECU+0x13c>
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	UART_sendString(pass);
    3364:	ce 01       	movw	r24, r28
    3366:	40 96       	adiw	r24, 0x10	; 16
    3368:	0e 94 33 06 	call	0xc66	; 0xc66 <UART_sendString>

	/* receive Control_ECU response */
	response = UART_recieveByte();
    336c:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_recieveByte>
    3370:	8f 87       	std	Y+15, r24	; 0x0f
	return response;
    3372:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3374:	6a 96       	adiw	r28, 0x1a	; 26
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <getPass>:
 * Description :
 * 		This function is responsible for storing the user entered password,
 * 		and printing '*' on LCD instead of each entered character
 */
void getPass(uint8 * passArr, uint8 * size)
{
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	a0 97       	sbiw	r28, 0x20	; 32
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	9e 8f       	std	Y+30, r25	; 0x1e
    33a2:	8d 8f       	std	Y+29, r24	; 0x1d
    33a4:	78 a3       	std	Y+32, r23	; 0x20
    33a6:	6f 8f       	std	Y+31, r22	; 0x1f
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	a8 ec       	ldi	r26, 0xC8	; 200
    33ae:	b2 e4       	ldi	r27, 0x42	; 66
    33b0:	89 8f       	std	Y+25, r24	; 0x19
    33b2:	9a 8f       	std	Y+26, r25	; 0x1a
    33b4:	ab 8f       	std	Y+27, r26	; 0x1b
    33b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b8:	69 8d       	ldd	r22, Y+25	; 0x19
    33ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	4a ef       	ldi	r20, 0xFA	; 250
    33c6:	54 e4       	ldi	r21, 0x44	; 68
    33c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	8d 8b       	std	Y+21, r24	; 0x15
    33d2:	9e 8b       	std	Y+22, r25	; 0x16
    33d4:	af 8b       	std	Y+23, r26	; 0x17
    33d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33d8:	6d 89       	ldd	r22, Y+21	; 0x15
    33da:	7e 89       	ldd	r23, Y+22	; 0x16
    33dc:	8f 89       	ldd	r24, Y+23	; 0x17
    33de:	98 8d       	ldd	r25, Y+24	; 0x18
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e8       	ldi	r20, 0x80	; 128
    33e6:	5f e3       	ldi	r21, 0x3F	; 63
    33e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ec:	88 23       	and	r24, r24
    33ee:	2c f4       	brge	.+10     	; 0x33fa <getPass+0x74>
		__ticks = 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	9c 8b       	std	Y+20, r25	; 0x14
    33f6:	8b 8b       	std	Y+19, r24	; 0x13
    33f8:	3f c0       	rjmp	.+126    	; 0x3478 <getPass+0xf2>
	else if (__tmp > 65535)
    33fa:	6d 89       	ldd	r22, Y+21	; 0x15
    33fc:	7e 89       	ldd	r23, Y+22	; 0x16
    33fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3400:	98 8d       	ldd	r25, Y+24	; 0x18
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	3f ef       	ldi	r19, 0xFF	; 255
    3406:	4f e7       	ldi	r20, 0x7F	; 127
    3408:	57 e4       	ldi	r21, 0x47	; 71
    340a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340e:	18 16       	cp	r1, r24
    3410:	4c f5       	brge	.+82     	; 0x3464 <getPass+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3412:	69 8d       	ldd	r22, Y+25	; 0x19
    3414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e2       	ldi	r20, 0x20	; 32
    3420:	51 e4       	ldi	r21, 0x41	; 65
    3422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9c 8b       	std	Y+20, r25	; 0x14
    3438:	8b 8b       	std	Y+19, r24	; 0x13
    343a:	0f c0       	rjmp	.+30     	; 0x345a <getPass+0xd4>
    343c:	88 ec       	ldi	r24, 0xC8	; 200
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9a 8b       	std	Y+18, r25	; 0x12
    3442:	89 8b       	std	Y+17, r24	; 0x11
    3444:	89 89       	ldd	r24, Y+17	; 0x11
    3446:	9a 89       	ldd	r25, Y+18	; 0x12
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <getPass+0xc2>
    344c:	9a 8b       	std	Y+18, r25	; 0x12
    344e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3450:	8b 89       	ldd	r24, Y+19	; 0x13
    3452:	9c 89       	ldd	r25, Y+20	; 0x14
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	9c 8b       	std	Y+20, r25	; 0x14
    3458:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345a:	8b 89       	ldd	r24, Y+19	; 0x13
    345c:	9c 89       	ldd	r25, Y+20	; 0x14
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	69 f7       	brne	.-38     	; 0x343c <getPass+0xb6>
    3462:	14 c0       	rjmp	.+40     	; 0x348c <getPass+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3464:	6d 89       	ldd	r22, Y+21	; 0x15
    3466:	7e 89       	ldd	r23, Y+22	; 0x16
    3468:	8f 89       	ldd	r24, Y+23	; 0x17
    346a:	98 8d       	ldd	r25, Y+24	; 0x18
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9c 8b       	std	Y+20, r25	; 0x14
    3476:	8b 8b       	std	Y+19, r24	; 0x13
    3478:	8b 89       	ldd	r24, Y+19	; 0x13
    347a:	9c 89       	ldd	r25, Y+20	; 0x14
    347c:	98 8b       	std	Y+16, r25	; 0x10
    347e:	8f 87       	std	Y+15, r24	; 0x0f
    3480:	8f 85       	ldd	r24, Y+15	; 0x0f
    3482:	98 89       	ldd	r25, Y+16	; 0x10
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	f1 f7       	brne	.-4      	; 0x3484 <getPass+0xfe>
    3488:	98 8b       	std	Y+16, r25	; 0x10
    348a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	*size = 0;
    348c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    348e:	f8 a1       	ldd	r31, Y+32	; 0x20
    3490:	10 82       	st	Z, r1
	do
	{
		passArr[(*size)++] = KEYPAD_getPressedKey();	/* store the entered keypad character in the array,
    3492:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3494:	f8 a1       	ldd	r31, Y+32	; 0x20
    3496:	f0 80       	ld	r15, Z
    3498:	2f 2d       	mov	r18, r15
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    349e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34a0:	8c 01       	movw	r16, r24
    34a2:	02 0f       	add	r16, r18
    34a4:	13 1f       	adc	r17, r19
    34a6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <KEYPAD_getPressedKey>
    34aa:	f8 01       	movw	r30, r16
    34ac:	80 83       	st	Z, r24
    34ae:	8f 2d       	mov	r24, r15
    34b0:	8f 5f       	subi	r24, 0xFF	; 255
    34b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    34b4:	f8 a1       	ldd	r31, Y+32	; 0x20
    34b6:	80 83       	st	Z, r24
														   increment its size */
		if(passArr[(*size) - 1] != 13)
    34b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    34ba:	f8 a1       	ldd	r31, Y+32	; 0x20
    34bc:	80 81       	ld	r24, Z
    34be:	88 2f       	mov	r24, r24
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	9c 01       	movw	r18, r24
    34c4:	21 50       	subi	r18, 0x01	; 1
    34c6:	30 40       	sbci	r19, 0x00	; 0
    34c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34cc:	fc 01       	movw	r30, r24
    34ce:	e2 0f       	add	r30, r18
    34d0:	f3 1f       	adc	r31, r19
    34d2:	80 81       	ld	r24, Z
    34d4:	8d 30       	cpi	r24, 0x0D	; 13
    34d6:	19 f0       	breq	.+6      	; 0x34de <getPass+0x158>
			LCD_displayCharacter('*');		/* print '*' on LCD in place of the entered keypad value, ignore ON key press */
    34d8:	8a e2       	ldi	r24, 0x2A	; 42
    34da:	0e 94 02 10 	call	0x2004	; 0x2004 <LCD_displayCharacter>
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	aa e7       	ldi	r26, 0x7A	; 122
    34e4:	b3 e4       	ldi	r27, 0x43	; 67
    34e6:	8b 87       	std	Y+11, r24	; 0x0b
    34e8:	9c 87       	std	Y+12, r25	; 0x0c
    34ea:	ad 87       	std	Y+13, r26	; 0x0d
    34ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	4a ef       	ldi	r20, 0xFA	; 250
    34fc:	54 e4       	ldi	r21, 0x44	; 68
    34fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	8f 83       	std	Y+7, r24	; 0x07
    3508:	98 87       	std	Y+8, r25	; 0x08
    350a:	a9 87       	std	Y+9, r26	; 0x09
    350c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    350e:	6f 81       	ldd	r22, Y+7	; 0x07
    3510:	78 85       	ldd	r23, Y+8	; 0x08
    3512:	89 85       	ldd	r24, Y+9	; 0x09
    3514:	9a 85       	ldd	r25, Y+10	; 0x0a
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e8       	ldi	r20, 0x80	; 128
    351c:	5f e3       	ldi	r21, 0x3F	; 63
    351e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3522:	88 23       	and	r24, r24
    3524:	2c f4       	brge	.+10     	; 0x3530 <getPass+0x1aa>
		__ticks = 1;
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
    352e:	3f c0       	rjmp	.+126    	; 0x35ae <getPass+0x228>
	else if (__tmp > 65535)
    3530:	6f 81       	ldd	r22, Y+7	; 0x07
    3532:	78 85       	ldd	r23, Y+8	; 0x08
    3534:	89 85       	ldd	r24, Y+9	; 0x09
    3536:	9a 85       	ldd	r25, Y+10	; 0x0a
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	3f ef       	ldi	r19, 0xFF	; 255
    353c:	4f e7       	ldi	r20, 0x7F	; 127
    353e:	57 e4       	ldi	r21, 0x47	; 71
    3540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3544:	18 16       	cp	r1, r24
    3546:	4c f5       	brge	.+82     	; 0x359a <getPass+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3548:	6b 85       	ldd	r22, Y+11	; 0x0b
    354a:	7c 85       	ldd	r23, Y+12	; 0x0c
    354c:	8d 85       	ldd	r24, Y+13	; 0x0d
    354e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3550:	20 e0       	ldi	r18, 0x00	; 0
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	40 e2       	ldi	r20, 0x20	; 32
    3556:	51 e4       	ldi	r21, 0x41	; 65
    3558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	bc 01       	movw	r22, r24
    3562:	cd 01       	movw	r24, r26
    3564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	9e 83       	std	Y+6, r25	; 0x06
    356e:	8d 83       	std	Y+5, r24	; 0x05
    3570:	0f c0       	rjmp	.+30     	; 0x3590 <getPass+0x20a>
    3572:	88 ec       	ldi	r24, 0xC8	; 200
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	9c 83       	std	Y+4, r25	; 0x04
    3578:	8b 83       	std	Y+3, r24	; 0x03
    357a:	8b 81       	ldd	r24, Y+3	; 0x03
    357c:	9c 81       	ldd	r25, Y+4	; 0x04
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <getPass+0x1f8>
    3582:	9c 83       	std	Y+4, r25	; 0x04
    3584:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3586:	8d 81       	ldd	r24, Y+5	; 0x05
    3588:	9e 81       	ldd	r25, Y+6	; 0x06
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	9e 83       	std	Y+6, r25	; 0x06
    358e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3590:	8d 81       	ldd	r24, Y+5	; 0x05
    3592:	9e 81       	ldd	r25, Y+6	; 0x06
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	69 f7       	brne	.-38     	; 0x3572 <getPass+0x1ec>
    3598:	14 c0       	rjmp	.+40     	; 0x35c2 <getPass+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359a:	6f 81       	ldd	r22, Y+7	; 0x07
    359c:	78 85       	ldd	r23, Y+8	; 0x08
    359e:	89 85       	ldd	r24, Y+9	; 0x09
    35a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	9e 83       	std	Y+6, r25	; 0x06
    35ac:	8d 83       	std	Y+5, r24	; 0x05
    35ae:	8d 81       	ldd	r24, Y+5	; 0x05
    35b0:	9e 81       	ldd	r25, Y+6	; 0x06
    35b2:	9a 83       	std	Y+2, r25	; 0x02
    35b4:	89 83       	std	Y+1, r24	; 0x01
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <getPass+0x234>
    35be:	9a 83       	std	Y+2, r25	; 0x02
    35c0:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(250);				/* wait 100ms between two keypad presses */

		/* keep storing characters till ON key is pressed */
	}while(passArr[(*size) - 1] != 13); /* 13 is ASCII of Enter, returned by keypad if ON is pressed */
    35c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    35c4:	f8 a1       	ldd	r31, Y+32	; 0x20
    35c6:	80 81       	ld	r24, Z
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9c 01       	movw	r18, r24
    35ce:	21 50       	subi	r18, 0x01	; 1
    35d0:	30 40       	sbci	r19, 0x00	; 0
    35d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35d6:	fc 01       	movw	r30, r24
    35d8:	e2 0f       	add	r30, r18
    35da:	f3 1f       	adc	r31, r19
    35dc:	80 81       	ld	r24, Z
    35de:	8d 30       	cpi	r24, 0x0D	; 13
    35e0:	09 f0       	breq	.+2      	; 0x35e4 <getPass+0x25e>
    35e2:	57 cf       	rjmp	.-338    	; 0x3492 <getPass+0x10c>

	passArr[--(*size)] = '\0'; /* terminate input string by null character, remove the enter character */
    35e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    35e6:	f8 a1       	ldd	r31, Y+32	; 0x20
    35e8:	80 81       	ld	r24, Z
    35ea:	81 50       	subi	r24, 0x01	; 1
    35ec:	ef 8d       	ldd	r30, Y+31	; 0x1f
    35ee:	f8 a1       	ldd	r31, Y+32	; 0x20
    35f0:	80 83       	st	Z, r24
    35f2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    35f4:	f8 a1       	ldd	r31, Y+32	; 0x20
    35f6:	80 81       	ld	r24, Z
    35f8:	28 2f       	mov	r18, r24
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3600:	fc 01       	movw	r30, r24
    3602:	e2 0f       	add	r30, r18
    3604:	f3 1f       	adc	r31, r19
    3606:	10 82       	st	Z, r1

}
    3608:	a0 96       	adiw	r28, 0x20	; 32
    360a:	0f b6       	in	r0, 0x3f	; 63
    360c:	f8 94       	cli
    360e:	de bf       	out	0x3e, r29	; 62
    3610:	0f be       	out	0x3f, r0	; 63
    3612:	cd bf       	out	0x3d, r28	; 61
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	ff 90       	pop	r15
    361e:	08 95       	ret

00003620 <isPassMatched>:
 * 			1: Passwords match
 * 			0: Passwords do not match
 *
 */
uint8 isPassMatched(uint8 * pass1, uint8 * pass2, uint8 size)
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	27 97       	sbiw	r28, 0x07	; 7
    362a:	0f b6       	in	r0, 0x3f	; 63
    362c:	f8 94       	cli
    362e:	de bf       	out	0x3e, r29	; 62
    3630:	0f be       	out	0x3f, r0	; 63
    3632:	cd bf       	out	0x3d, r28	; 61
    3634:	9c 83       	std	Y+4, r25	; 0x04
    3636:	8b 83       	std	Y+3, r24	; 0x03
    3638:	7e 83       	std	Y+6, r23	; 0x06
    363a:	6d 83       	std	Y+5, r22	; 0x05
    363c:	4f 83       	std	Y+7, r20	; 0x07
	uint8 i = 0, matched = 1;
    363e:	1a 82       	std	Y+2, r1	; 0x02
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	89 83       	std	Y+1, r24	; 0x01
    3644:	19 c0       	rjmp	.+50     	; 0x3678 <isPassMatched+0x58>
	for(; i < size; ++i)
	{
		if(pass1[i] == pass2[i])
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	28 2f       	mov	r18, r24
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	8b 81       	ldd	r24, Y+3	; 0x03
    364e:	9c 81       	ldd	r25, Y+4	; 0x04
    3650:	fc 01       	movw	r30, r24
    3652:	e2 0f       	add	r30, r18
    3654:	f3 1f       	adc	r31, r19
    3656:	40 81       	ld	r20, Z
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	28 2f       	mov	r18, r24
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	9e 81       	ldd	r25, Y+6	; 0x06
    3662:	fc 01       	movw	r30, r24
    3664:	e2 0f       	add	r30, r18
    3666:	f3 1f       	adc	r31, r19
    3668:	80 81       	ld	r24, Z
    366a:	48 17       	cp	r20, r24
    366c:	11 f0       	breq	.+4      	; 0x3672 <isPassMatched+0x52>
		{
			continue;
		}
		else
		{
			matched = 0;
    366e:	19 82       	std	Y+1, r1	; 0x01
    3670:	07 c0       	rjmp	.+14     	; 0x3680 <isPassMatched+0x60>
 *
 */
uint8 isPassMatched(uint8 * pass1, uint8 * pass2, uint8 size)
{
	uint8 i = 0, matched = 1;
	for(; i < size; ++i)
    3672:	8a 81       	ldd	r24, Y+2	; 0x02
    3674:	8f 5f       	subi	r24, 0xFF	; 255
    3676:	8a 83       	std	Y+2, r24	; 0x02
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	8f 81       	ldd	r24, Y+7	; 0x07
    367c:	98 17       	cp	r25, r24
    367e:	18 f3       	brcs	.-58     	; 0x3646 <isPassMatched+0x26>
			matched = 0;
			break;
		}
	}

	return matched;
    3680:	89 81       	ldd	r24, Y+1	; 0x01
}
    3682:	27 96       	adiw	r28, 0x07	; 7
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret

00003694 <TIMER1_delay_15sec>:
/*
 * Description :
 * 			This function is to generate 15 seconds delay using timer1.
 */
void TIMER1_delay_15sec(void)
{
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	2b 97       	sbiw	r28, 0x0b	; 11
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
	/* 118880 == 58594*/
	Timer1_Config_t config = { 1000 , 58594, TIMER1_PRESCALER_1024, TIMER1_CTC_MODE};
    36a8:	ce 01       	movw	r24, r28
    36aa:	01 96       	adiw	r24, 0x01	; 1
    36ac:	98 87       	std	Y+8, r25	; 0x08
    36ae:	8f 83       	std	Y+7, r24	; 0x07
    36b0:	e8 e6       	ldi	r30, 0x68	; 104
    36b2:	f1 e0       	ldi	r31, 0x01	; 1
    36b4:	fa 87       	std	Y+10, r31	; 0x0a
    36b6:	e9 87       	std	Y+9, r30	; 0x09
    36b8:	f6 e0       	ldi	r31, 0x06	; 6
    36ba:	fb 87       	std	Y+11, r31	; 0x0b
    36bc:	e9 85       	ldd	r30, Y+9	; 0x09
    36be:	fa 85       	ldd	r31, Y+10	; 0x0a
    36c0:	00 80       	ld	r0, Z
    36c2:	89 85       	ldd	r24, Y+9	; 0x09
    36c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c6:	01 96       	adiw	r24, 0x01	; 1
    36c8:	9a 87       	std	Y+10, r25	; 0x0a
    36ca:	89 87       	std	Y+9, r24	; 0x09
    36cc:	ef 81       	ldd	r30, Y+7	; 0x07
    36ce:	f8 85       	ldd	r31, Y+8	; 0x08
    36d0:	00 82       	st	Z, r0
    36d2:	8f 81       	ldd	r24, Y+7	; 0x07
    36d4:	98 85       	ldd	r25, Y+8	; 0x08
    36d6:	01 96       	adiw	r24, 0x01	; 1
    36d8:	98 87       	std	Y+8, r25	; 0x08
    36da:	8f 83       	std	Y+7, r24	; 0x07
    36dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    36de:	91 50       	subi	r25, 0x01	; 1
    36e0:	9b 87       	std	Y+11, r25	; 0x0b
    36e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    36e4:	ee 23       	and	r30, r30
    36e6:	51 f7       	brne	.-44     	; 0x36bc <TIMER1_delay_15sec+0x28>
	Timer1_init(&config);
    36e8:	ce 01       	movw	r24, r28
    36ea:	01 96       	adiw	r24, 0x01	; 1
    36ec:	0e 94 08 07 	call	0xe10	; 0xe10 <Timer1_init>
	Timer1_setCallBack(TIMER1_callback_function);
    36f0:	80 ed       	ldi	r24, 0xD0	; 208
    36f2:	9b e1       	ldi	r25, 0x1B	; 27
    36f4:	0e 94 81 07 	call	0xf02	; 0xf02 <Timer1_setCallBack>
	while(ticks < 2);
    36f8:	80 91 76 01 	lds	r24, 0x0176
    36fc:	82 30       	cpi	r24, 0x02	; 2
    36fe:	e0 f3       	brcs	.-8      	; 0x36f8 <TIMER1_delay_15sec+0x64>
	ticks = 0;
    3700:	10 92 76 01 	sts	0x0176, r1
	Timer1_deInit();
    3704:	0e 94 62 07 	call	0xec4	; 0xec4 <Timer1_deInit>

}
    3708:	2b 96       	adiw	r28, 0x0b	; 11
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	08 95       	ret

0000371a <TIMER1_delay_1sec>:
/*
 * Description :
 * 			This function is to generate 1 second delay using timer1.
 */
void TIMER1_delay_1sec(void)
{
    371a:	df 93       	push	r29
    371c:	cf 93       	push	r28
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	2b 97       	sbiw	r28, 0x0b	; 11
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61
	/* required OCR value to generate 1 second at 1024 pre-scaler is 7813*/
	/* Timer will run in CTC, so we can put any dummy number in TCNT1 for the config*/
	Timer1_Config_t config = { 1000 , 7813, TIMER1_PRESCALER_1024, TIMER1_CTC_MODE};
    372e:	ce 01       	movw	r24, r28
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	98 87       	std	Y+8, r25	; 0x08
    3734:	8f 83       	std	Y+7, r24	; 0x07
    3736:	ee e6       	ldi	r30, 0x6E	; 110
    3738:	f1 e0       	ldi	r31, 0x01	; 1
    373a:	fa 87       	std	Y+10, r31	; 0x0a
    373c:	e9 87       	std	Y+9, r30	; 0x09
    373e:	f6 e0       	ldi	r31, 0x06	; 6
    3740:	fb 87       	std	Y+11, r31	; 0x0b
    3742:	e9 85       	ldd	r30, Y+9	; 0x09
    3744:	fa 85       	ldd	r31, Y+10	; 0x0a
    3746:	00 80       	ld	r0, Z
    3748:	89 85       	ldd	r24, Y+9	; 0x09
    374a:	9a 85       	ldd	r25, Y+10	; 0x0a
    374c:	01 96       	adiw	r24, 0x01	; 1
    374e:	9a 87       	std	Y+10, r25	; 0x0a
    3750:	89 87       	std	Y+9, r24	; 0x09
    3752:	ef 81       	ldd	r30, Y+7	; 0x07
    3754:	f8 85       	ldd	r31, Y+8	; 0x08
    3756:	00 82       	st	Z, r0
    3758:	8f 81       	ldd	r24, Y+7	; 0x07
    375a:	98 85       	ldd	r25, Y+8	; 0x08
    375c:	01 96       	adiw	r24, 0x01	; 1
    375e:	98 87       	std	Y+8, r25	; 0x08
    3760:	8f 83       	std	Y+7, r24	; 0x07
    3762:	9b 85       	ldd	r25, Y+11	; 0x0b
    3764:	91 50       	subi	r25, 0x01	; 1
    3766:	9b 87       	std	Y+11, r25	; 0x0b
    3768:	eb 85       	ldd	r30, Y+11	; 0x0b
    376a:	ee 23       	and	r30, r30
    376c:	51 f7       	brne	.-44     	; 0x3742 <TIMER1_delay_1sec+0x28>
	Timer1_init(&config);
    376e:	ce 01       	movw	r24, r28
    3770:	01 96       	adiw	r24, 0x01	; 1
    3772:	0e 94 08 07 	call	0xe10	; 0xe10 <Timer1_init>

	/* set timer callback function */
	Timer1_setCallBack(TIMER1_callback_function);
    3776:	80 ed       	ldi	r24, 0xD0	; 208
    3778:	9b e1       	ldi	r25, 0x1B	; 27
    377a:	0e 94 81 07 	call	0xf02	; 0xf02 <Timer1_setCallBack>
	/* wait for timer to generate the interrupt */
	while(!ticks);
    377e:	80 91 76 01 	lds	r24, 0x0176
    3782:	88 23       	and	r24, r24
    3784:	e1 f3       	breq	.-8      	; 0x377e <TIMER1_delay_1sec+0x64>

	/* reset ticks variable for the next future use */
	ticks = 0;
    3786:	10 92 76 01 	sts	0x0176, r1

	/* reset timer1 configurations */
	Timer1_deInit();
    378a:	0e 94 62 07 	call	0xec4	; 0xec4 <Timer1_deInit>

}
    378e:	2b 96       	adiw	r28, 0x0b	; 11
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	08 95       	ret

000037a0 <TIMER1_callback_function>:

void TIMER1_callback_function(void)
{
    37a0:	df 93       	push	r29
    37a2:	cf 93       	push	r28
    37a4:	cd b7       	in	r28, 0x3d	; 61
    37a6:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    37a8:	80 91 76 01 	lds	r24, 0x0176
    37ac:	8f 5f       	subi	r24, 0xFF	; 255
    37ae:	80 93 76 01 	sts	0x0176, r24
}
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <main>:
#include "APP/app.h"



int main()
{
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    37c0:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <APP_init>

	while(1)
	{
		APP_start();
    37c4:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <APP_start>
    37c8:	fd cf       	rjmp	.-6      	; 0x37c4 <main+0xc>

000037ca <__udivmodsi4>:
    37ca:	a1 e2       	ldi	r26, 0x21	; 33
    37cc:	1a 2e       	mov	r1, r26
    37ce:	aa 1b       	sub	r26, r26
    37d0:	bb 1b       	sub	r27, r27
    37d2:	fd 01       	movw	r30, r26
    37d4:	0d c0       	rjmp	.+26     	; 0x37f0 <__udivmodsi4_ep>

000037d6 <__udivmodsi4_loop>:
    37d6:	aa 1f       	adc	r26, r26
    37d8:	bb 1f       	adc	r27, r27
    37da:	ee 1f       	adc	r30, r30
    37dc:	ff 1f       	adc	r31, r31
    37de:	a2 17       	cp	r26, r18
    37e0:	b3 07       	cpc	r27, r19
    37e2:	e4 07       	cpc	r30, r20
    37e4:	f5 07       	cpc	r31, r21
    37e6:	20 f0       	brcs	.+8      	; 0x37f0 <__udivmodsi4_ep>
    37e8:	a2 1b       	sub	r26, r18
    37ea:	b3 0b       	sbc	r27, r19
    37ec:	e4 0b       	sbc	r30, r20
    37ee:	f5 0b       	sbc	r31, r21

000037f0 <__udivmodsi4_ep>:
    37f0:	66 1f       	adc	r22, r22
    37f2:	77 1f       	adc	r23, r23
    37f4:	88 1f       	adc	r24, r24
    37f6:	99 1f       	adc	r25, r25
    37f8:	1a 94       	dec	r1
    37fa:	69 f7       	brne	.-38     	; 0x37d6 <__udivmodsi4_loop>
    37fc:	60 95       	com	r22
    37fe:	70 95       	com	r23
    3800:	80 95       	com	r24
    3802:	90 95       	com	r25
    3804:	9b 01       	movw	r18, r22
    3806:	ac 01       	movw	r20, r24
    3808:	bd 01       	movw	r22, r26
    380a:	cf 01       	movw	r24, r30
    380c:	08 95       	ret

0000380e <__prologue_saves__>:
    380e:	2f 92       	push	r2
    3810:	3f 92       	push	r3
    3812:	4f 92       	push	r4
    3814:	5f 92       	push	r5
    3816:	6f 92       	push	r6
    3818:	7f 92       	push	r7
    381a:	8f 92       	push	r8
    381c:	9f 92       	push	r9
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	ca 1b       	sub	r28, r26
    3838:	db 0b       	sbc	r29, r27
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	de bf       	out	0x3e, r29	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	cd bf       	out	0x3d, r28	; 61
    3844:	09 94       	ijmp

00003846 <__epilogue_restores__>:
    3846:	2a 88       	ldd	r2, Y+18	; 0x12
    3848:	39 88       	ldd	r3, Y+17	; 0x11
    384a:	48 88       	ldd	r4, Y+16	; 0x10
    384c:	5f 84       	ldd	r5, Y+15	; 0x0f
    384e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3850:	7d 84       	ldd	r7, Y+13	; 0x0d
    3852:	8c 84       	ldd	r8, Y+12	; 0x0c
    3854:	9b 84       	ldd	r9, Y+11	; 0x0b
    3856:	aa 84       	ldd	r10, Y+10	; 0x0a
    3858:	b9 84       	ldd	r11, Y+9	; 0x09
    385a:	c8 84       	ldd	r12, Y+8	; 0x08
    385c:	df 80       	ldd	r13, Y+7	; 0x07
    385e:	ee 80       	ldd	r14, Y+6	; 0x06
    3860:	fd 80       	ldd	r15, Y+5	; 0x05
    3862:	0c 81       	ldd	r16, Y+4	; 0x04
    3864:	1b 81       	ldd	r17, Y+3	; 0x03
    3866:	aa 81       	ldd	r26, Y+2	; 0x02
    3868:	b9 81       	ldd	r27, Y+1	; 0x01
    386a:	ce 0f       	add	r28, r30
    386c:	d1 1d       	adc	r29, r1
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	ed 01       	movw	r28, r26
    387a:	08 95       	ret

0000387c <itoa>:
    387c:	fb 01       	movw	r30, r22
    387e:	9f 01       	movw	r18, r30
    3880:	e8 94       	clt
    3882:	42 30       	cpi	r20, 0x02	; 2
    3884:	c4 f0       	brlt	.+48     	; 0x38b6 <itoa+0x3a>
    3886:	45 32       	cpi	r20, 0x25	; 37
    3888:	b4 f4       	brge	.+44     	; 0x38b6 <itoa+0x3a>
    388a:	4a 30       	cpi	r20, 0x0A	; 10
    388c:	29 f4       	brne	.+10     	; 0x3898 <itoa+0x1c>
    388e:	97 fb       	bst	r25, 7
    3890:	1e f4       	brtc	.+6      	; 0x3898 <itoa+0x1c>
    3892:	90 95       	com	r25
    3894:	81 95       	neg	r24
    3896:	9f 4f       	sbci	r25, 0xFF	; 255
    3898:	64 2f       	mov	r22, r20
    389a:	77 27       	eor	r23, r23
    389c:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodhi4>
    38a0:	80 5d       	subi	r24, 0xD0	; 208
    38a2:	8a 33       	cpi	r24, 0x3A	; 58
    38a4:	0c f0       	brlt	.+2      	; 0x38a8 <itoa+0x2c>
    38a6:	89 5d       	subi	r24, 0xD9	; 217
    38a8:	81 93       	st	Z+, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	a1 f7       	brne	.-24     	; 0x3898 <itoa+0x1c>
    38b0:	16 f4       	brtc	.+4      	; 0x38b6 <itoa+0x3a>
    38b2:	5d e2       	ldi	r21, 0x2D	; 45
    38b4:	51 93       	st	Z+, r21
    38b6:	10 82       	st	Z, r1
    38b8:	c9 01       	movw	r24, r18
    38ba:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <strrev>

000038be <strrev>:
    38be:	dc 01       	movw	r26, r24
    38c0:	fc 01       	movw	r30, r24
    38c2:	67 2f       	mov	r22, r23
    38c4:	71 91       	ld	r23, Z+
    38c6:	77 23       	and	r23, r23
    38c8:	e1 f7       	brne	.-8      	; 0x38c2 <strrev+0x4>
    38ca:	32 97       	sbiw	r30, 0x02	; 2
    38cc:	04 c0       	rjmp	.+8      	; 0x38d6 <strrev+0x18>
    38ce:	7c 91       	ld	r23, X
    38d0:	6d 93       	st	X+, r22
    38d2:	70 83       	st	Z, r23
    38d4:	62 91       	ld	r22, -Z
    38d6:	ae 17       	cp	r26, r30
    38d8:	bf 07       	cpc	r27, r31
    38da:	c8 f3       	brcs	.-14     	; 0x38ce <strrev+0x10>
    38dc:	08 95       	ret

000038de <__udivmodhi4>:
    38de:	aa 1b       	sub	r26, r26
    38e0:	bb 1b       	sub	r27, r27
    38e2:	51 e1       	ldi	r21, 0x11	; 17
    38e4:	07 c0       	rjmp	.+14     	; 0x38f4 <__udivmodhi4_ep>

000038e6 <__udivmodhi4_loop>:
    38e6:	aa 1f       	adc	r26, r26
    38e8:	bb 1f       	adc	r27, r27
    38ea:	a6 17       	cp	r26, r22
    38ec:	b7 07       	cpc	r27, r23
    38ee:	10 f0       	brcs	.+4      	; 0x38f4 <__udivmodhi4_ep>
    38f0:	a6 1b       	sub	r26, r22
    38f2:	b7 0b       	sbc	r27, r23

000038f4 <__udivmodhi4_ep>:
    38f4:	88 1f       	adc	r24, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	5a 95       	dec	r21
    38fa:	a9 f7       	brne	.-22     	; 0x38e6 <__udivmodhi4_loop>
    38fc:	80 95       	com	r24
    38fe:	90 95       	com	r25
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	08 95       	ret

00003906 <_exit>:
    3906:	f8 94       	cli

00003908 <__stop_program>:
    3908:	ff cf       	rjmp	.-2      	; 0x3908 <__stop_program>
